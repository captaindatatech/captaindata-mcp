{
  "openapi": "3.1.0",
  "info": {
    "title": "Captain Data Automation External API",
    "description": "This is the External API documentation for Captain Data Automation",
    "version": "dev"
  },
  "components": {
    "securitySchemes": {
      "XApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "title": "APIError",
              "description": "Represents an error returned by the API. This schema defines the standard structure of error messages to ensure consistent error handling across the application.",
              "type": "object",
              "properties": {
                "error_label": {
                  "type": "string",
                  "nullable": true
                },
                "error_scope": {
                  "type": "string",
                  "enum": [
                    "input",
                    "integ",
                    "param",
                    "config"
                  ],
                  "nullable": true
                },
                "error_ref": {
                  "type": "string",
                  "examples": [
                    "ERR-12345"
                  ],
                  "nullable": true
                },
                "message": {
                  "type": "string"
                },
                "status_code": {
                  "type": "integer",
                  "nullable": true
                },
                "params": {
                  "type": "object",
                  "patternProperties": {
                    "^[^_].*": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                }
              },
              "additionalProperties": false
            }
          }
        }
      },
      "FailedDependency": {
        "description": "Failed Dependency",
        "content": {
          "application/json": {
            "schema": {
              "title": "APIError",
              "description": "Represents an error returned by the API. This schema defines the standard structure of error messages to ensure consistent error handling across the application.",
              "type": "object",
              "properties": {
                "error_label": {
                  "type": "string",
                  "nullable": true
                },
                "error_scope": {
                  "type": "string",
                  "enum": [
                    "input",
                    "integ",
                    "param",
                    "config"
                  ],
                  "nullable": true
                },
                "error_ref": {
                  "type": "string",
                  "examples": [
                    "ERR-12345"
                  ],
                  "nullable": true
                },
                "message": {
                  "type": "string"
                },
                "status_code": {
                  "type": "integer",
                  "nullable": true
                },
                "params": {
                  "type": "object",
                  "patternProperties": {
                    "^[^_].*": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                }
              },
              "additionalProperties": false
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "title": "APIError",
              "description": "Represents an error returned by the API. This schema defines the standard structure of error messages to ensure consistent error handling across the application.",
              "type": "object",
              "properties": {
                "error_label": {
                  "type": "string",
                  "nullable": true
                },
                "error_scope": {
                  "type": "string",
                  "enum": [
                    "input",
                    "integ",
                    "param",
                    "config"
                  ],
                  "nullable": true
                },
                "error_ref": {
                  "type": "string",
                  "examples": [
                    "ERR-12345"
                  ],
                  "nullable": true
                },
                "message": {
                  "type": "string"
                },
                "status_code": {
                  "type": "integer",
                  "nullable": true
                },
                "params": {
                  "type": "object",
                  "patternProperties": {
                    "^[^_].*": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                }
              },
              "additionalProperties": false
            }
          }
        }
      },
      "ActionAsyncResponse": {
        "description": "Default Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "run_id": {
                  "type": "integer",
                  "description": "The ID of the run."
                },
                "run_uid": {
                  "type": "string",
                  "description": "The UID of the run."
                },
                "workspace_uid": {
                  "type": "string",
                  "description": "The UID of the workspace."
                },
                "user_uid": {
                  "type": "string",
                  "description": "The UID of the user."
                },
                "action_name": {
                  "type": "string",
                  "description": "The name of the action."
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "pending",
                    "running",
                    "completed",
                    "failed"
                  ],
                  "description": "The status of the run."
                },
                "postponed_until": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "If the run is postponed, this field indicates when it will be retried."
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time when the run was created."
                },
                "synced_at": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date and time when the run was synced."
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "The date and time when the run was last updated."
                }
              }
            }
          }
        }
      },
      "ActionScheduleResponse": {
        "description": "Default Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "schedule_uid": {
                  "type": "string",
                  "description": "The UID of the scheduled run."
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "ACTIVE",
                    "CANCELLED",
                    "PAUSED",
                    "COMPLETED"
                  ],
                  "description": "The status of the scheduled run."
                },
                "cron": {
                  "type": "string",
                  "description": "Cron expression for the scheduled run (POSIX format)",
                  "nullable": true
                },
                "timezone": {
                  "type": "string",
                  "description": "Timezone for the scheduled run (IANA timezone format)",
                  "nullable": true
                },
                "next_execution_at": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "Next execution at"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time when the run was created."
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "def-0": {
        "title": "APIError",
        "description": "Represents an error returned by the API. This schema defines the standard structure of error messages to ensure consistent error handling across the application.",
        "type": "object",
        "properties": {
          "error_label": {
            "type": "string",
            "nullable": true
          },
          "error_scope": {
            "type": "string",
            "enum": [
              "input",
              "integ",
              "param",
              "config"
            ],
            "nullable": true
          },
          "error_ref": {
            "type": "string",
            "nullable": true,
            "example": "ERR-12345"
          },
          "message": {
            "type": "string"
          },
          "status_code": {
            "type": "integer",
            "nullable": true
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "APIError": {
        "title": "APIError",
        "description": "Represents an error returned by the API. This schema defines the standard structure of error messages to ensure consistent error handling across the application.",
        "type": "object",
        "properties": {
          "error_label": {
            "type": "string",
            "nullable": true
          },
          "error_scope": {
            "type": "string",
            "enum": [
              "input",
              "integ",
              "param",
              "config"
            ],
            "nullable": true
          },
          "error_ref": {
            "type": "string",
            "examples": [
              "ERR-12345"
            ],
            "nullable": true
          },
          "message": {
            "type": "string"
          },
          "status_code": {
            "type": "integer",
            "nullable": true
          },
          "params": {
            "type": "object",
            "patternProperties": {
              "^[^_].*": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmptyInput": {
        "type": "object",
        "properties": {},
        "additionalProperties": false,
        "default": {}
      },
      "GooglemapsExtractPlaceInput": {
        "type": "object",
        "properties": {
          "google_maps_place_url": {
            "pattern": "/https?:\\/\\/www\\.google\\.(com|fr)\\/maps\\/place\\//",
            "type": "string",
            "format": "uri",
            "x-primary": true,
            "x-variations": [
              "url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "google_maps_place_url"
        ]
      },
      "GooglemapsExtractPlaceOutput": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "place_name": {
            "type": "string"
          },
          "google_maps_place_url": {
            "type": "string",
            "format": "uri"
          },
          "rating": {
            "type": "string"
          },
          "number_reviews": {
            "type": "integer"
          },
          "category": {
            "type": "string"
          },
          "opening_hours": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          },
          "services_available": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "additional_info": {
            "type": "string"
          },
          "google_maps_place_id": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "coordinates_latitude": {
            "type": "string"
          },
          "coordinates_longitude": {
            "type": "string"
          },
          "closed_temporarily": {
            "type": "boolean"
          },
          "closed_permanently": {
            "type": "boolean"
          }
        }
      },
      "GooglemapsSearchPlacesInput": {
        "type": "object",
        "properties": {
          "google_maps_search_url": {
            "pattern": "/(?:http(?:s)?:\\/\\/){1}(?:www\\.)?(google.)(com|fr)(\\/maps\\/)search\\//",
            "type": "string",
            "format": "uri",
            "description": "A Google Maps Search URL should start with the following: https://www.google.com/maps/search/ or be query.",
            "x-primary": true,
            "x-help": "A Google Maps Search URL should start with the following: https://www.google.com/maps/search/ or be query."
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "google_maps_search_url"
        ]
      },
      "GooglemapsSearchPlacesOutput": {
        "type": "object",
        "properties": {
          "google_maps_place_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "GooglemapsExtractReviewsInput": {
        "type": "object",
        "properties": {
          "google_maps_place_url": {
            "type": "string",
            "format": "uri",
            "pattern": "/https:\\/\\/www\\.google\\.com\\/maps\\/place\\/|https:\\/\\/goo\\.gl\\/maps\\/|https:\\/\\/g\\.page\\/|https:\\/\\/maps\\.app\\.goo\\.gl\\//",
            "x-includes": [
              "https://www.google.com/maps/place/",
              "https://goo.gl/maps/",
              "https://g.page/",
              "https://maps.app.goo.gl/"
            ],
            "x-primary": true,
            "x-variations": [
              "google_reviews_url",
              "url",
              "google_maps_reviews_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "google_maps_place_url"
        ]
      },
      "GooglemapsExtractReviewsOutput": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "google_maps_review_id": {
            "type": "string"
          },
          "google_maps_review_url": {
            "type": "string",
            "format": "uri"
          },
          "author_name": {
            "type": "string"
          },
          "author_img": {
            "type": "string"
          },
          "experience_date": {
            "type": "string"
          },
          "grade": {
            "type": "number"
          },
          "author_reviews_count": {
            "type": "integer"
          },
          "review_date": {
            "type": "string",
            "format": "date-time"
          },
          "standard_review_date": {
            "type": "string",
            "format": "date-time"
          },
          "answer_date": {
            "type": "string",
            "format": "date-time"
          },
          "standard_answer_date": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "answer": {
            "type": "string"
          },
          "translated_content": {
            "type": "string"
          },
          "translated_answer": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "review_language": {
            "type": "string"
          },
          "google_maps_place_url": {
            "type": "string",
            "format": "uri"
          },
          "place_name": {
            "type": "string"
          }
        }
      },
      "LinkedinAcceptInvitationsOutput": {
        "type": "object",
        "properties": {
          "linkedin_invitation_id": {
            "type": "integer"
          },
          "linkedin_invitation_urn": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "sent_time": {
            "type": "string",
            "format": "date-time"
          },
          "invitation_secret": {
            "type": "string"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "linkedin_profile_image_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "LinkedinArchiveMessageInput": {
        "type": "object",
        "properties": {
          "linkedin_thread_id": {
            "pattern": "/2-[A-Za-z0-9_-]+==/",
            "type": "string",
            "description": "A message thread url should look like: 'https://www.linkedin.com/messaging/thread/2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/' or be a valid thread ID such as '2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/'.",
            "x-primary": true,
            "x-help": "A message thread url should look like: 'https://www.linkedin.com/messaging/thread/2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/' or be a valid thread ID such as '2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/'."
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_thread_id"
        ]
      },
      "LinkedinArchiveMessageOutput": {
        "type": "object",
        "properties": {
          "linkedin_thread_id": {
            "type": "string"
          }
        }
      },
      "LinkedinCommentPostInput": {
        "type": "object",
        "properties": {
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "anyOf": [
          {
            "type": "object",
            "required": [
              "linkedin_post_url"
            ],
            "properties": {
              "linkedin_post_url": {
                "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(posts|feed)\\/[\\w%-]+/",
                "type": "string",
                "format": "uri",
                "description": "A LinkedIn Post URL should start with \"https://www.linkedin.com/posts/\".",
                "x-help": "A LinkedIn Post URL should start with \"https://www.linkedin.com/posts/\".",
                "x-required-variations": [
                  "linkedin_comment_url"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "linkedin_comment_url"
            ],
            "properties": {
              "linkedin_comment_url": {
                "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/feed\\/update\\/[\\w%-]+/",
                "type": "string",
                "format": "uri",
                "description": "A comment URL should start with \"https://www.linkedin.com/feed/update\".",
                "x-help": "A comment URL should start with \"https://www.linkedin.com/feed/update\"."
              }
            }
          }
        ],
        "additionalProperties": false
      },
      "LinkedinCommentPostOutput": {
        "type": "object",
        "properties": {
          "linkedin_url": {
            "type": "string",
            "format": "uri"
          },
          "thread_urn": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LinkedinConnectProfileInput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:in|pub|sales\\/people|sales\\/lead)\\/[^\\s/]+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-primary": true,
            "x-placeholder": "LinkedIn People Profile URL",
            "x-help": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-variations": [
              "url",
              "profile_url",
              "linkedin_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_profile_url"
        ]
      },
      "LinkedinConnectProfileOutput": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "recently_declined": {
            "type": "boolean"
          },
          "connected": {
            "type": "boolean"
          },
          "pending": {
            "type": "string"
          }
        }
      },
      "LinkedinExtractCompanyAffiliatesInput": {
        "type": "object",
        "properties": {
          "linkedin_company_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:sales\\/)?(?:school|pub|company|showcase)\\/[\\w%-]+(?:\\/(?:\\w+)?)?/i",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Company URL should start with 'https://www.linkedin.com/sales/company', 'https://www.linkedin/showcase' 'https://www.linkedin.com/company' or 'https://www.linkedin.com/school'\"",
            "x-primary": true,
            "x-placeholder": "LinkedIn Company URL",
            "x-help": "A LinkedIn Company URL should start with 'https://www.linkedin.com/sales/company', 'https://www.linkedin/showcase' 'https://www.linkedin.com/company' or 'https://www.linkedin.com/school'\"",
            "x-variations": [
              "url",
              "company_url",
              "current_company_url",
              "link"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_company_url"
        ]
      },
      "LinkedinExtractCompanyAffiliatesOutput": {
        "type": "object",
        "properties": {
          "industry": {
            "type": "string"
          },
          "original_company_name": {
            "type": "string"
          },
          "original_linkedin_company_id": {
            "type": "string"
          },
          "original_linkedin_company_url": {
            "type": "string",
            "format": "uri"
          },
          "followers_count": {
            "type": "number"
          },
          "linkedin_company_id": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "linkedin_company_url": {
            "type": "string",
            "format": "uri"
          },
          "affiliate_status": {
            "type": "string"
          }
        }
      },
      "LinkedinExtractCompanyInput": {
        "type": "object",
        "properties": {
          "linkedin_company_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:sales\\/)?(?:school|pub|company|showcase)\\/[\\w%-]+(?:\\/(?:\\w+)?)?/i",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Company URL should start with 'https://www.linkedin.com/sales/company', 'https://www.linkedin/showcase' 'https://www.linkedin.com/company' or 'https://www.linkedin.com/school'\"",
            "x-primary": true,
            "x-placeholder": "LinkedIn Company URL",
            "x-help": "A LinkedIn Company URL should start with 'https://www.linkedin.com/sales/company', 'https://www.linkedin/showcase' 'https://www.linkedin.com/company' or 'https://www.linkedin.com/school'\"",
            "x-variations": [
              "url",
              "company_url",
              "current_company_url",
              "link"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_company_url"
        ]
      },
      "LinkedinExtractCompanyOutput": {
        "type": "object",
        "properties": {
          "company_name": {
            "type": "string"
          },
          "specialties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tagline": {
            "type": "string"
          },
          "linkedin_company_id": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "founded_on": {
            "type": "number"
          },
          "linkedin_company_url": {
            "type": "string",
            "format": "uri"
          },
          "website": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_company_phone": {
            "type": "string"
          },
          "sales_navigator_company_url": {
            "type": "string",
            "format": "uri"
          },
          "industries": {
            "type": "array",
            "description": "Industries taxonomy (v2)",
            "items": {
              "type": "string"
            }
          },
          "industries_v1": {
            "type": "array",
            "description": "Industries (v1)",
            "items": {
              "type": "string"
            }
          },
          "industry": {
            "type": "string"
          },
          "linkedin_job_search_url": {
            "type": "string",
            "format": "uri"
          },
          "followers_count": {
            "type": "integer"
          },
          "number_employees": {
            "type": "number"
          },
          "employees_range": {
            "type": "string"
          },
          "linkedin_employees_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_employees_url": {
            "type": "string",
            "format": "uri"
          },
          "country": {
            "type": "string"
          },
          "geographic_area": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "headquarters": {
            "type": "string"
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "address": {
                  "type": "string"
                },
                "geographic_area": {
                  "type": "string"
                },
                "street": {
                  "type": "string"
                },
                "postal_code": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                }
              }
            }
          },
          "number_of_locations": {
            "type": "number"
          },
          "last_funding_investors": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "name": {
                  "type": "string"
                },
                "crunchbase_company_url": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "crunchbase_company_url": {
            "type": "string",
            "format": "uri"
          },
          "last_funding_date": {
            "type": "string",
            "format": "date"
          },
          "last_funding_type": {
            "type": "string"
          },
          "last_funding_raised": {
            "type": "number"
          },
          "last_funding_currency": {
            "type": "string"
          },
          "logo_url": {
            "type": "string",
            "format": "uri"
          },
          "domain": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "linkedin_school_id": {
            "type": "number"
          },
          "linkedin_page_claimed": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "affiliates": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "company_name": {
                  "type": "string"
                },
                "entity_urn": {
                  "type": "string"
                },
                "followers_count": {
                  "type": "integer"
                },
                "industry": {
                  "type": "string"
                },
                "linkedin_company_url": {
                  "type": "string"
                },
                "original_company_name": {
                  "type": "string"
                },
                "original_linkedin_company_id": {
                  "type": "string"
                },
                "original_linkedin_company_url": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "LinkedinExtractCompanyEmployeesInsightsInput": {
        "type": "object",
        "properties": {
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "anyOf": [
          {
            "type": "object",
            "required": [
              "linkedin_company_url"
            ],
            "properties": {
              "linkedin_company_url": {
                "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:sales\\/)?(?:school|pub|company|showcase)\\/[\\w%-]+(?:\\/(?:\\w+)?)?/i",
                "type": "string",
                "format": "uri",
                "description": "A LinkedIn Company URL should start with 'https://www.linkedin.com/sales/company', 'https://www.linkedin/showcase' 'https://www.linkedin.com/company' or 'https://www.linkedin.com/school'\"",
                "x-primary": true,
                "x-help": "A LinkedIn Company URL should start with 'https://www.linkedin.com/sales/company', 'https://www.linkedin/showcase' 'https://www.linkedin.com/company' or 'https://www.linkedin.com/school'\"",
                "x-variations": [
                  "sales_navigator_company_url",
                  "company_url"
                ],
                "x-required-variations": [
                  "linkedin_company_id"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "linkedin_company_id"
            ],
            "properties": {
              "linkedin_company_id": {
                "type": "number",
                "x-variations": [
                  "company_id",
                  "sales_navigator_company_id"
                ]
              }
            }
          }
        ],
        "additionalProperties": false
      },
      "LinkedinExtractCompanyEmployeesInsightsOutput": {
        "type": "object",
        "properties": {
          "linkedin_company_url": {
            "type": "string"
          },
          "linkedin_company_handle": {
            "type": "string"
          },
          "linkedin_company_id": {
            "type": "integer"
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                }
              }
            }
          },
          "schools": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string"
                },
                "linkedin_school_id": {
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                }
              }
            }
          },
          "functions": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                }
              }
            }
          },
          "skills": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                }
              }
            }
          },
          "fields_of_study": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                }
              }
            }
          },
          "connection_degrees": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "connection_degree": {
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "LinkedinExtractConnectionsOutput": {
        "type": "object",
        "properties": {
          "connected_at": {
            "type": "string",
            "format": "date-time"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "profile_image_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          }
        }
      },
      "LinkedinExtractContactInput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:in|pub|sales\\/people|sales\\/lead)\\/[^\\s/]+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-primary": true,
            "x-placeholder": "LinkedIn People Profile URL",
            "x-help": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-variations": [
              "url",
              "profile_url",
              "linkedin_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_profile_url"
        ]
      },
      "LinkedinExtractContactOutput": {
        "type": "object",
        "properties": {
          "connected_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "website": {
            "type": "string",
            "format": "uri"
          },
          "twitter_handles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "twitter": {
            "type": "string",
            "format": "uri"
          },
          "phones": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "phone": {
            "type": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          }
        }
      },
      "LinkedinExtractConversationsOutput": {
        "type": "object",
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "linkedin_profile_id": {
                  "type": "number"
                },
                "sales_navigator_profile_id": {
                  "type": "string"
                },
                "linkedin_profile_url": {
                  "type": "string",
                  "format": "uri"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "job_title": {
                  "type": "string"
                },
                "linkedin_people_post_search_url": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "linkedin_thread_id": {
            "type": "string"
          },
          "linkedin_thread_url": {
            "type": "string",
            "format": "uri"
          },
          "read": {
            "type": "boolean"
          },
          "total_received_messages": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_activity_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_message": {
            "type": "object",
            "properties": {
              "delivered_at": {
                "type": "string",
                "format": "date-time"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "linkedin_profile_id": {
                "type": "number"
              },
              "sales_navigator_profile_id": {
                "type": "string"
              },
              "job_title": {
                "type": "string"
              },
              "message_id": {
                "type": "string"
              },
              "content": {
                "type": "string"
              },
              "attachments": {
                "type": "array",
                "items": {
                  "type": "object",
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "errorMessage": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "errorMessage"
                      ]
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "audio"
                          ]
                        },
                        "duration": {
                          "type": "number"
                        },
                        "url": {
                          "type": "string",
                          "format": "uri"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "video"
                          ]
                        },
                        "thumbnail": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "digitalmediaAsset": {
                              "type": "string"
                            },
                            "attribution": {
                              "type": "object"
                            },
                            "focalPoint": {
                              "type": "object"
                            },
                            "artifacts": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "rootUrl": {
                              "type": "string",
                              "format": "uri"
                            }
                          }
                        },
                        "entityUrn": {
                          "type": "string"
                        },
                        "prevMedia": {
                          "type": "object"
                        },
                        "nextMedia": {
                          "type": "object"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "file"
                          ]
                        },
                        "assetUrn": {
                          "type": "string"
                        },
                        "byteSize": {
                          "type": "number"
                        },
                        "mediaType": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "vectorImage"
                          ]
                        },
                        "digitalmediaAsset": {
                          "type": "string"
                        },
                        "attribution": {
                          "type": "object"
                        },
                        "focalPoint": {
                          "type": "object"
                        },
                        "rootUrl": {
                          "type": "string",
                          "format": "uri"
                        },
                        "artifacts": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "externalMedia"
                          ]
                        },
                        "entityUrn": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string",
                          "format": "uri"
                        },
                        "previewUrl": {
                          "type": "string",
                          "format": "uri"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "forwardedMessageContent"
                          ]
                        },
                        "bodyText": {
                          "type": "string"
                        },
                        "footerText": {
                          "type": "string"
                        },
                        "originalSendAt": {
                          "type": "number"
                        },
                        "originalSender": {
                          "type": "object",
                          "properties": {
                            "backendUrn": {
                              "type": "string"
                            },
                            "entityUrn": {
                              "type": "string"
                            },
                            "participant": {
                              "type": "object",
                              "properties": {
                                "firstName": {
                                  "type": "string"
                                },
                                "headline": {
                                  "type": "string"
                                },
                                "lastName": {
                                  "type": "string"
                                },
                                "profilePicture": {
                                  "type": "object",
                                  "properties": {
                                    "rootUrl": {
                                      "type": "string",
                                      "format": "uri"
                                    },
                                    "artifacts": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "messageAdRenderContent"
                          ]
                        },
                        "activityType": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "conversationAdsMessageContent"
                          ]
                        },
                        "sponsoredMessageContentUrn": {
                          "type": "string"
                        },
                        "texts": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "hostUrnData"
                          ]
                        },
                        "hostUrnType": {
                          "type": "string"
                        },
                        "hostUrn": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "repliedMessageContent"
                          ]
                        },
                        "bodyText": {
                          "type": "string"
                        },
                        "originalMessageUrn": {
                          "type": "string"
                        },
                        "originalSendAt": {
                          "type": "number"
                        },
                        "originalSender": {
                          "type": "object",
                          "properties": {
                            "backendUrn": {
                              "type": "string"
                            },
                            "entityUrn": {
                              "type": "string"
                            },
                            "participant": {
                              "type": "object",
                              "properties": {
                                "firstName": {
                                  "type": "string"
                                },
                                "headline": {
                                  "type": "string"
                                },
                                "lastName": {
                                  "type": "string"
                                },
                                "profilePicture": {
                                  "type": "object",
                                  "properties": {
                                    "rootUrl": {
                                      "type": "string",
                                      "format": "uri"
                                    },
                                    "artifacts": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "additionalProperties": false
          },
          "unread_count": {
            "type": "integer"
          },
          "sponsored": {
            "type": "boolean"
          }
        }
      },
      "LinkedinExtractEventInput": {
        "type": "object",
        "properties": {
          "linkedin_event_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:events\\/[\\d\\w%-]+|video\\/event\\/urn:li:ugcPost:\\d+)/",
            "type": "string",
            "format": "uri",
            "description": "Input should contain a valid LinkedIn Event URL: https://www.linkedin.com/events/EVENT_ID.",
            "x-primary": true,
            "x-placeholder": "Linkedin Event URL",
            "x-help": "Input should contain a valid LinkedIn Event URL: https://www.linkedin.com/events/EVENT_ID.",
            "x-variations": [
              "url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_event_url"
        ]
      },
      "LinkedinExtractEventOutput": {
        "type": "object",
        "properties": {
          "event_name": {
            "type": "string"
          },
          "event_information": {
            "type": "string"
          },
          "linkedin_event_id": {
            "type": "string"
          },
          "linkedin_event_url": {
            "type": "string",
            "format": "uri"
          },
          "event_external_link": {
            "type": "string",
            "format": "uri"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "number_attendees": {
            "type": "string"
          },
          "event_start_datetime": {
            "type": "string"
          },
          "event_end_datetime": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "linkedin_company_id": {
            "type": "string"
          },
          "linkedin_company_url": {
            "type": "string",
            "format": "uri"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "speakers": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "full_name": {
                  "type": "string"
                },
                "linkedin_profile_url": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        }
      },
      "LinkedinExtractEventAttendeesInput": {
        "type": "object",
        "properties": {
          "linkedin_event_url": {
            "pattern": "/(?:http(?:s)?:\\/\\/){1}(?:(?:www|\\w{2})\\.)?linkedin\\.com\\/(?:events\\/[\\d\\w%-]+|video\\/event\\/urn:li:ugcPost:\\d+)|(?:https?:\\/\\/)?(?:www\\.)?linkedin\\.com\\/.*\\?eventAttending=%5B(%22|\")\\d{19}(%22|\")%5D/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn event URL should look like \"https://www.linkedin.com/events/6578957872855689398650/\".",
            "x-primary": true,
            "x-help": "A LinkedIn event URL should look like \"https://www.linkedin.com/events/6578957872855689398650/\".",
            "x-variations": [
              "linkedin_event_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_event_url"
        ]
      },
      "LinkedinExtractEventAttendeesOutput": {
        "type": "object",
        "properties": {
          "company_name": {
            "type": "string"
          },
          "linkedin_event_url": {
            "type": "string",
            "format": "uri"
          },
          "first_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "headline": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "profile_image_url": {
            "type": "string",
            "format": "uri"
          },
          "connection_degree": {
            "type": "string"
          },
          "current_title": {
            "type": "string"
          },
          "shared_connection_search_url": {
            "type": "string",
            "format": "uri"
          },
          "number_shared_connections": {
            "type": "integer"
          },
          "shared_connection_profile_urls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LinkedinExtractFollowersOutput": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_id": {
            "type": "integer"
          }
        }
      },
      "LinkedinExtractGroupMembersInput": {
        "type": "object",
        "properties": {
          "linkedin_group_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/groups\\/\\d+(?:\\/)?/",
            "type": "string",
            "format": "uri",
            "description": "Input should look like this: \"https://www.linkedin.com/groups/8952/\"",
            "x-primary": true,
            "x-help": "Input should look like this: \"https://www.linkedin.com/groups/8952/\"",
            "x-variations": [
              "group_url",
              "url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_group_url"
        ]
      },
      "LinkedinExtractGroupMembersOutput": {
        "type": "object",
        "properties": {
          "membership_status": {
            "type": "string"
          },
          "joined_at": {
            "type": "string"
          },
          "linkedin_group_id": {
            "type": "string"
          },
          "linkedin_profile_picture": {
            "type": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "linkedin_connection_degree": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_people_post_search_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "LinkedinExtractJobInput": {
        "type": "object",
        "properties": {
          "linkedin_job_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/jobs\\/view\\/\\d+(?:\\/[\\w?=%&]+)?/",
            "type": "string",
            "format": "uri",
            "description": "URL should look like \"https://www.linkedin.com/jobs/view/0123456789/\"",
            "x-primary": true,
            "x-help": "URL should look like \"https://www.linkedin.com/jobs/view/0123456789/\""
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_job_url"
        ]
      },
      "LinkedinExtractJobOutput": {
        "type": "object",
        "properties": {
          "linkedin_job_id": {
            "type": "integer"
          },
          "job_location": {
            "type": "string"
          },
          "linkedin_job_url": {
            "type": "string",
            "format": "uri"
          },
          "field": {
            "type": "string"
          },
          "job_description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "remote_allowed": {
            "type": "boolean"
          },
          "skills": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "linkedin_company_id": {
            "type": "string"
          },
          "linkedin_company_url": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "linkedin_job_application_url": {
            "type": "string",
            "format": "uri"
          },
          "profile_full_name": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "posted_at": {
            "type": "string",
            "format": "date-time"
          },
          "reposted_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LinkedinExtractLicensesCertificationsInput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/in\\/[-\\w\\d%]+/gi",
            "type": "string",
            "format": "uri",
            "x-primary": true
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_profile_url"
        ]
      },
      "LinkedinExtractLicensesCertificationsOutput": {
        "type": "object",
        "properties": {
          "credential_id": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "company_name": {
            "type": "string"
          },
          "original_linkedin_company_url": {
            "type": "string",
            "format": "uri"
          },
          "external_certificate_link": {
            "type": "string",
            "format": "uri"
          },
          "issued_date": {
            "type": "string",
            "format": "date"
          },
          "expiration_date": {
            "type": "string",
            "format": "date"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "LinkedinExtractMessagesInput": {
        "type": "object",
        "properties": {
          "linkedin_thread_url": {
            "pattern": "/(?<=thread\\/|^)\\d.+?==/",
            "type": "string",
            "description": "A message thread url should look like: 'https://www.linkedin.com/messaging/thread/2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/' or be a valid thread ID such as '2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/'.",
            "x-primary": true,
            "x-help": "A message thread url should look like: 'https://www.linkedin.com/messaging/thread/2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/' or be a valid thread ID such as '2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/'.",
            "x-variations": [
              "url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_thread_url"
        ]
      },
      "LinkedinExtractMessagesOutput": {
        "type": "object",
        "properties": {
          "linkedin_thread_id": {
            "type": "string"
          },
          "position": {
            "type": "integer"
          },
          "delivered_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "message_id": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "errorMessage": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "type",
                    "errorMessage"
                  ]
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "audio"
                      ]
                    },
                    "duration": {
                      "type": "number"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "video"
                      ]
                    },
                    "thumbnail": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "digitalmediaAsset": {
                          "type": "string"
                        },
                        "attribution": {
                          "type": "object"
                        },
                        "focalPoint": {
                          "type": "object"
                        },
                        "artifacts": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "rootUrl": {
                          "type": "string",
                          "format": "uri"
                        }
                      }
                    },
                    "entityUrn": {
                      "type": "string"
                    },
                    "prevMedia": {
                      "type": "object"
                    },
                    "nextMedia": {
                      "type": "object"
                    }
                  }
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "file"
                      ]
                    },
                    "assetUrn": {
                      "type": "string"
                    },
                    "byteSize": {
                      "type": "number"
                    },
                    "mediaType": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "vectorImage"
                      ]
                    },
                    "digitalmediaAsset": {
                      "type": "string"
                    },
                    "attribution": {
                      "type": "object"
                    },
                    "focalPoint": {
                      "type": "object"
                    },
                    "rootUrl": {
                      "type": "string",
                      "format": "uri"
                    },
                    "artifacts": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "externalMedia"
                      ]
                    },
                    "entityUrn": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "previewUrl": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "forwardedMessageContent"
                      ]
                    },
                    "bodyText": {
                      "type": "string"
                    },
                    "footerText": {
                      "type": "string"
                    },
                    "originalSendAt": {
                      "type": "number"
                    },
                    "originalSender": {
                      "type": "object",
                      "properties": {
                        "backendUrn": {
                          "type": "string"
                        },
                        "entityUrn": {
                          "type": "string"
                        },
                        "participant": {
                          "type": "object",
                          "properties": {
                            "firstName": {
                              "type": "string"
                            },
                            "headline": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            },
                            "profilePicture": {
                              "type": "object",
                              "properties": {
                                "rootUrl": {
                                  "type": "string",
                                  "format": "uri"
                                },
                                "artifacts": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "messageAdRenderContent"
                      ]
                    },
                    "activityType": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "conversationAdsMessageContent"
                      ]
                    },
                    "sponsoredMessageContentUrn": {
                      "type": "string"
                    },
                    "texts": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "hostUrnData"
                      ]
                    },
                    "hostUrnType": {
                      "type": "string"
                    },
                    "hostUrn": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "repliedMessageContent"
                      ]
                    },
                    "bodyText": {
                      "type": "string"
                    },
                    "originalMessageUrn": {
                      "type": "string"
                    },
                    "originalSendAt": {
                      "type": "number"
                    },
                    "originalSender": {
                      "type": "object",
                      "properties": {
                        "backendUrn": {
                          "type": "string"
                        },
                        "entityUrn": {
                          "type": "string"
                        },
                        "participant": {
                          "type": "object",
                          "properties": {
                            "firstName": {
                              "type": "string"
                            },
                            "headline": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            },
                            "profilePicture": {
                              "type": "object",
                              "properties": {
                                "rootUrl": {
                                  "type": "string",
                                  "format": "uri"
                                },
                                "artifacts": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "LinkedinExtractMessagesLegacyInput": {
        "type": "object",
        "properties": {
          "linkedin_thread_url": {
            "pattern": "/(?<=thread\\/|^)\\d.+?==/",
            "type": "string",
            "description": "A message thread url should look like: 'https://www.linkedin.com/messaging/thread/2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/' or be a valid thread ID such as '2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/'.",
            "x-primary": true,
            "x-help": "A message thread url should look like: 'https://www.linkedin.com/messaging/thread/2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/' or be a valid thread ID such as '2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/'.",
            "x-variations": [
              "url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_thread_url"
        ]
      },
      "LinkedinExtractMessagesLegacyOutput": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "position": {
                  "type": "integer"
                },
                "delivered_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "linkedin_profile_id": {
                  "type": "number"
                },
                "sales_navigator_profile_id": {
                  "type": "string"
                },
                "job_title": {
                  "type": "string"
                },
                "content": {
                  "type": "string"
                },
                "message_id": {
                  "type": "string"
                },
                "attachments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "errorMessage": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "errorMessage"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "audio"
                            ]
                          },
                          "duration": {
                            "type": "number"
                          },
                          "url": {
                            "type": "string",
                            "format": "uri"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "video"
                            ]
                          },
                          "thumbnail": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "digitalmediaAsset": {
                                "type": "string"
                              },
                              "attribution": {
                                "type": "object"
                              },
                              "focalPoint": {
                                "type": "object"
                              },
                              "artifacts": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "rootUrl": {
                                "type": "string",
                                "format": "uri"
                              }
                            }
                          },
                          "entityUrn": {
                            "type": "string"
                          },
                          "prevMedia": {
                            "type": "object"
                          },
                          "nextMedia": {
                            "type": "object"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "file"
                            ]
                          },
                          "assetUrn": {
                            "type": "string"
                          },
                          "byteSize": {
                            "type": "number"
                          },
                          "mediaType": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "vectorImage"
                            ]
                          },
                          "digitalmediaAsset": {
                            "type": "string"
                          },
                          "attribution": {
                            "type": "object"
                          },
                          "focalPoint": {
                            "type": "object"
                          },
                          "rootUrl": {
                            "type": "string",
                            "format": "uri"
                          },
                          "artifacts": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "externalMedia"
                            ]
                          },
                          "entityUrn": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string",
                            "format": "uri"
                          },
                          "previewUrl": {
                            "type": "string",
                            "format": "uri"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "forwardedMessageContent"
                            ]
                          },
                          "bodyText": {
                            "type": "string"
                          },
                          "footerText": {
                            "type": "string"
                          },
                          "originalSendAt": {
                            "type": "number"
                          },
                          "originalSender": {
                            "type": "object",
                            "properties": {
                              "backendUrn": {
                                "type": "string"
                              },
                              "entityUrn": {
                                "type": "string"
                              },
                              "participant": {
                                "type": "object",
                                "properties": {
                                  "firstName": {
                                    "type": "string"
                                  },
                                  "headline": {
                                    "type": "string"
                                  },
                                  "lastName": {
                                    "type": "string"
                                  },
                                  "profilePicture": {
                                    "type": "object",
                                    "properties": {
                                      "rootUrl": {
                                        "type": "string",
                                        "format": "uri"
                                      },
                                      "artifacts": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "messageAdRenderContent"
                            ]
                          },
                          "activityType": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "conversationAdsMessageContent"
                            ]
                          },
                          "sponsoredMessageContentUrn": {
                            "type": "string"
                          },
                          "texts": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "hostUrnData"
                            ]
                          },
                          "hostUrnType": {
                            "type": "string"
                          },
                          "hostUrn": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "repliedMessageContent"
                            ]
                          },
                          "bodyText": {
                            "type": "string"
                          },
                          "originalMessageUrn": {
                            "type": "string"
                          },
                          "originalSendAt": {
                            "type": "number"
                          },
                          "originalSender": {
                            "type": "object",
                            "properties": {
                              "backendUrn": {
                                "type": "string"
                              },
                              "entityUrn": {
                                "type": "string"
                              },
                              "participant": {
                                "type": "object",
                                "properties": {
                                  "firstName": {
                                    "type": "string"
                                  },
                                  "headline": {
                                    "type": "string"
                                  },
                                  "lastName": {
                                    "type": "string"
                                  },
                                  "profilePicture": {
                                    "type": "object",
                                    "properties": {
                                      "rootUrl": {
                                        "type": "string",
                                        "format": "uri"
                                      },
                                      "artifacts": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "linkedin_thread_id": {
            "type": "string"
          }
        }
      },
      "LinkedinExtractPageFollowersInput": {
        "type": "object",
        "properties": {
          "linkedin_company_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:sales\\/)?(?:school|pub|company|showcase)\\/[\\w%-]+(?:\\/(?:\\w+)?)?/i",
            "type": "string",
            "format": "uri",
            "description": "A Linkedin Company URL should start with \"https://www.linkedin.com/company/\"",
            "x-primary": true,
            "x-help": "A Linkedin Company URL should start with \"https://www.linkedin.com/company/\"",
            "x-variations": [
              "company_url",
              "current_company_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_company_url"
        ]
      },
      "LinkedinExtractPageFollowersOutput": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "headline": {
            "type": "string"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "followed_at": {
            "type": "string"
          },
          "profile_image_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_people_post_search_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_id": {
            "type": "integer"
          }
        }
      },
      "LinkedinExtractPeopleCommentActivityInput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/in\\/[-\\w\\d%]+/gi",
            "x-primary": true
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_profile_url"
        ]
      },
      "LinkedinExtractPeopleCommentActivityOutput": {
        "type": "object",
        "properties": {
          "comment_like_count": {
            "type": "number"
          },
          "comment_reply_count": {
            "type": "number"
          },
          "linkedin_comment_id": {
            "type": "string"
          },
          "linkedin_comment_url": {
            "type": "string",
            "format": "url"
          },
          "comment_text": {
            "type": "string"
          },
          "author_comment_reply": {
            "type": "string"
          },
          "comment_time": {
            "type": "string"
          },
          "linkedin_post_id": {
            "type": "string"
          },
          "linkedin_post_url": {
            "type": "string",
            "format": "url"
          },
          "comment_type": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "url"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          }
        }
      },
      "LinkedinExtractPeoplePostActivityInput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/in\\/[-\\w\\d%]+/gi",
            "type": "string",
            "format": "uri",
            "x-primary": true
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_profile_url"
        ]
      },
      "LinkedinExtractPeoplePostActivityOutput": {
        "type": "object",
        "properties": {
          "comment_count": {
            "type": "integer"
          },
          "reaction_count": {
            "type": "integer"
          },
          "repost_count": {
            "type": "integer"
          },
          "full_name": {
            "type": "string"
          },
          "linkedin_post_id": {
            "type": "string"
          },
          "linkedin_post_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "last_name": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "published_date": {
            "type": "string",
            "format": "date"
          },
          "content_text": {
            "type": "string"
          },
          "linkedin_original_post_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_post_type": {
            "type": "string"
          },
          "linkedin_profile_handle": {
            "type": "string"
          }
        }
      },
      "LinkedinExtractPeopleInput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:in|pub|sales\\/people|sales\\/lead)\\/[^\\s/]+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-primary": true,
            "x-placeholder": "LinkedIn People Profile URL",
            "x-help": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-variations": [
              "url",
              "profile_url",
              "linkedin_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_profile_url"
        ]
      },
      "LinkedinExtractPeopleOutput": {
        "type": "object",
        "properties": {
          "linkedin_profile_handle": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "birth_date": {
            "type": "string"
          },
          "headline": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "skills": {
            "type": "array",
            "items": {
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "profile_country": {
            "type": "string"
          },
          "profile_language": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "profile_image_url": {
            "type": "string",
            "format": "uri"
          },
          "job_title": {
            "type": "string"
          },
          "education": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "school_name": {
                  "type": "string"
                },
                "linkedin_school_url": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                },
                "linkedin_school_id": {
                  "type": "string"
                },
                "degree_name": {
                  "type": "string"
                }
              }
            }
          },
          "school_name": {
            "type": "string"
          },
          "linkedin_school_url": {
            "type": "string",
            "format": "uri"
          },
          "volunteer_experiences": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "number_connections": {
            "type": "number"
          },
          "experiences": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "title": {
                  "type": "string"
                },
                "company_name": {
                  "type": "string"
                },
                "company_description": {
                  "type": "string"
                },
                "linkedin_company_url": {
                  "type": "string",
                  "format": "uri"
                },
                "location": {
                  "type": "string"
                },
                "linkedin_company_id": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                },
                "job_time_period": {
                  "type": "string"
                },
                "company_logo_url": {
                  "type": "string"
                }
              }
            }
          },
          "company_name": {
            "type": "string"
          },
          "linkedin_company_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_company_id": {
            "type": "string"
          },
          "number_followers": {
            "type": "number"
          },
          "linkedin_people_post_search_url": {
            "type": "string",
            "format": "uri"
          },
          "connection_degree": {
            "type": "string"
          },
          "open_to_work": {
            "type": "boolean"
          },
          "linkedin_thread_id": {
            "type": "string"
          },
          "past_company_name": {
            "type": "string"
          },
          "past_job_title": {
            "type": "string"
          },
          "past_sales_navigator_company_id": {
            "type": "string"
          },
          "past_linkedin_company_id": {
            "type": "string"
          },
          "past_linkedin_company_url": {
            "type": "string",
            "format": "uri"
          },
          "connected_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LinkedinExtractPeopleReactionActivityInput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/in\\/[-\\w\\d%]+/gi",
            "type": "string",
            "format": "uri",
            "x-primary": true
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_profile_url"
        ]
      },
      "LinkedinExtractPeopleReactionActivityOutput": {
        "type": "object",
        "properties": {
          "linkedin_post_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_reaction_id": {
            "type": "string"
          },
          "linkedin_reaction_type": {
            "type": "string"
          },
          "linkedin_post_id": {
            "type": "string"
          },
          "linkedin_reaction_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "published_time": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          }
        }
      },
      "LinkedinExtractPostInput": {
        "type": "object",
        "properties": {
          "linkedin_post_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(posts|feed)\\/[\\w%-]+/",
            "type": "string",
            "format": "uri",
            "x-primary": true
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_post_url"
        ]
      },
      "LinkedinExtractPostOutput": {
        "type": "object",
        "properties": {
          "published_date": {
            "type": "string",
            "format": "date-time"
          },
          "hyperlinks": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "post_media_url": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "content_text": {
            "type": "string"
          },
          "linkedin_post_id": {
            "type": "string"
          },
          "linkedin_post_url": {
            "type": "string",
            "format": "uri"
          },
          "full_name": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "linkedin_original_post": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_post_type": {
            "type": "string"
          },
          "reaction_count": {
            "type": "integer"
          },
          "comment_count": {
            "type": "integer"
          },
          "repost_count": {
            "type": "integer"
          },
          "linkedin_job_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "LinkedinExtractPostCommentersInput": {
        "type": "object",
        "properties": {
          "linkedin_post_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(posts|feed)\\/[\\w%-]+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Post URL should start with \"https://www.linkedin.com/posts/\".",
            "x-primary": true,
            "x-help": "A LinkedIn Post URL should start with \"https://www.linkedin.com/posts/\"."
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_post_url"
        ]
      },
      "LinkedinExtractPostCommentersOutput": {
        "type": "object",
        "properties": {
          "last_name": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "linkedin_profile_picture": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_connection_degree": {
            "type": "string"
          },
          "comment_text": {
            "type": "string"
          },
          "comment_time": {
            "type": "string",
            "format": "date-time"
          },
          "comment_like_count": {
            "type": "number"
          },
          "comment_reply_count": {
            "type": "number"
          },
          "last_reply": {
            "type": "string"
          },
          "linkedin_comment_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_comment_id": {
            "type": "string"
          },
          "linkedin_post_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_post_id": {
            "type": "string"
          }
        }
      },
      "LinkedinExtractPostLikersInput": {
        "type": "object",
        "properties": {
          "linkedin_post_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(posts|feed)\\/[\\w%-]+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Post URL should start with \"https://www.linkedin.com/posts/\".",
            "x-primary": true,
            "x-help": "A LinkedIn Post URL should start with \"https://www.linkedin.com/posts/\"."
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_post_url"
        ]
      },
      "LinkedinExtractPostLikersOutput": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "reaction_type": {
            "type": "string"
          },
          "reaction_urn": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "liker_connection_degree": {
            "type": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "sales_navigator_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "job_title": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "linkedin_people_post_search_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_post_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_post_id": {
            "type": "string"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "linkedin_company_id": {
            "type": "string"
          }
        }
      },
      "LinkedinExtractProfileViewersOutput": {
        "type": "object",
        "properties": {
          "view_timestamp": {
            "type": "integer"
          },
          "view_date": {
            "type": "string",
            "format": "date-time"
          },
          "connection_degree": {
            "type": "string"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "headline": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "profile_image_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_people_post_search_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "LinkedinExtractSchoolAlumnisInput": {
        "type": "object",
        "properties": {
          "linkedin_school_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/school\\/[\\w-]+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn School URL should start with 'https://www.linkedin.com/school/'",
            "x-primary": true,
            "x-help": "A LinkedIn School URL should start with 'https://www.linkedin.com/school/'"
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_school_url"
        ]
      },
      "LinkedinExtractSchoolAlumnisOutput": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string"
          },
          "headline": {
            "type": "string"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "connection_degree": {
            "type": "string"
          },
          "profile_image_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "school_name": {
            "type": "string"
          },
          "linkedin_people_post_search_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_profile_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "LinkedinExtractSentInvitationsOutput": {
        "type": "object",
        "properties": {
          "invitation_id": {
            "type": "string"
          },
          "sent_date": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "job_title": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "string"
          }
        }
      },
      "LinkedinExtractSimilarCompaniesInput": {
        "type": "object",
        "properties": {
          "linkedin_company_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:sales\\/)?(?:school|pub|company|showcase)\\/[\\w%-]+(?:\\/(?:\\w+)?)?/i",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Company URL should start with 'https://www.linkedin.com/sales/company', 'https://www.linkedin/showcase' 'https://www.linkedin.com/company' or 'https://www.linkedin.com/school'\"",
            "x-primary": true,
            "x-placeholder": "LinkedIn Company URL",
            "x-help": "A LinkedIn Company URL should start with 'https://www.linkedin.com/sales/company', 'https://www.linkedin/showcase' 'https://www.linkedin.com/company' or 'https://www.linkedin.com/school'\"",
            "x-variations": [
              "url",
              "company_url",
              "current_company_url",
              "link"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_company_url"
        ]
      },
      "LinkedinExtractSimilarCompaniesOutput": {
        "type": "object",
        "properties": {
          "industry": {
            "type": "string"
          },
          "original_company_name": {
            "type": "string"
          },
          "original_linkedin_company_id": {
            "type": "string"
          },
          "original_linkedin_company_url": {
            "type": "string",
            "format": "uri"
          },
          "followers_count": {
            "type": "string"
          },
          "linkedin_company_id": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "linkedin_company_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "LinkedinFollowProfileInput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:in|pub|sales\\/people|sales\\/lead)\\/[^\\s/]+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-primary": true,
            "x-placeholder": "LinkedIn People Profile URL",
            "x-help": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-variations": [
              "url",
              "profile_url",
              "linkedin_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_profile_url"
        ]
      },
      "LinkedinFollowProfileOutput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "followed": {
            "type": "boolean"
          },
          "linkedin_profile_id": {
            "type": "integer"
          }
        }
      },
      "LinkedinInmailProfileInput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:in|pub|sales\\/people|sales\\/lead)\\/[^\\s/]+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-primary": true,
            "x-placeholder": "LinkedIn People Profile URL",
            "x-help": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-variations": [
              "url",
              "profile_url",
              "linkedin_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_profile_url"
        ]
      },
      "LinkedinInmailProfileOutput": {
        "type": "object",
        "properties": {
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "linkedin_thread_id": {
            "type": "string"
          },
          "linkedin_thread_url": {
            "type": "string",
            "format": "uri"
          },
          "is_sent": {
            "type": "boolean"
          },
          "linkedin_people_post_search_url": {
            "type": "string",
            "format": "uri"
          },
          "delivered_at": {
            "type": "string",
            "format": "date-time"
          },
          "linkedin_message_id": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "assetUrn": {
                  "type": "string"
                },
                "byteSize": {
                  "type": "number"
                },
                "mediaType": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "LinkedinInviteEventInput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:in|pub|sales\\/people|sales\\/lead)\\/[^\\s/]+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-primary": true,
            "x-placeholder": "LinkedIn People Profile URL",
            "x-help": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-variations": [
              "url",
              "profile_url",
              "linkedin_url"
            ]
          },
          "linkedin_event_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:events\\/[\\d\\w%-]+|video\\/event\\/urn:li:ugcPost:\\d+)/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Event URL should start with 'https://www.linkedin.com/video/event' or 'https://www.linkedin.com/events'\"",
            "x-placeholder": "LinkedIn Event URL",
            "x-help": "A LinkedIn Event URL should start with 'https://www.linkedin.com/video/event' or 'https://www.linkedin.com/events'\"",
            "x-variations": [
              "url",
              "event_url",
              "link"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_profile_url",
          "linkedin_event_url"
        ]
      },
      "LinkedinInviteEventOutput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "pending": {
            "type": "boolean"
          },
          "linkedin_event_url": {
            "type": "string",
            "format": "uri"
          },
          "job_title": {
            "type": "string"
          },
          "linkedin_people_post_search_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "LinkedinLikePostInput": {
        "type": "object",
        "properties": {
          "linkedin_post_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(posts|feed)\\/[\\w%-]+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Post URL should start with \"https://www.linkedin.com/posts/\".",
            "x-primary": true,
            "x-help": "A LinkedIn Post URL should start with \"https://www.linkedin.com/posts/\"."
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_post_url"
        ]
      },
      "LinkedinLikePostOutput": {
        "type": "object",
        "properties": {
          "reaction": {
            "type": "string"
          },
          "linkedin_post_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "LinkedinMarkMessageAsReadInput": {
        "type": "object",
        "properties": {
          "linkedin_thread_id": {
            "pattern": "/2-[A-Za-z0-9_-]+==/",
            "type": "string",
            "description": "A message thread url should look like: 'https://www.linkedin.com/messaging/thread/2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/' or be a valid thread ID such as '2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/'.",
            "x-primary": true,
            "x-help": "A message thread url should look like: 'https://www.linkedin.com/messaging/thread/2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/' or be a valid thread ID such as '2-OTFhNjRhZDUtY2M4ZS00OGM4LWJjYTctYTQwYjc5NmY3ZmJkXzAxMg==/'."
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_thread_id"
        ]
      },
      "LinkedinMarkMessageAsReadOutput": {
        "type": "object",
        "properties": {
          "linkedin_thread_id": {
            "type": "string"
          }
        }
      },
      "LinkedinMeOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "object_urn": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "twitter": {
            "type": "string"
          },
          "premium_subscriber": {
            "type": "boolean"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "profile_image_url": {
            "type": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          }
        }
      },
      "LinkedinMessageProfileInput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:in|pub|sales\\/people|sales\\/lead)\\/[^\\s/]+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-primary": true,
            "x-placeholder": "LinkedIn People Profile URL",
            "x-help": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-variations": [
              "url",
              "profile_url",
              "linkedin_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_profile_url"
        ]
      },
      "LinkedinMessageProfileOutput": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "linkedin_thread_id": {
            "type": "string"
          },
          "linkedin_thread_url": {
            "type": "string",
            "format": "uri"
          },
          "is_sent": {
            "type": "boolean"
          },
          "reply": {
            "type": "string"
          },
          "delivered_at": {
            "type": "string",
            "format": "date-time"
          },
          "linkedin_message_id": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "assetUrn": {
                  "type": "string"
                },
                "byteSize": {
                  "type": "number"
                },
                "mediaType": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "LinkedinPeopleidFromSalesnavigatoridInput": {
        "type": "object",
        "properties": {
          "sales_navigator_profile_id": {
            "pattern": "/^AC[o-rw-z][\\w-]+/",
            "type": "string",
            "description": "A sales_navigator_profile_id should start with 'ACo', 'ACo' or 'ACr'",
            "x-primary": true,
            "x-placeholder": "Sales Navigator profile identifiant",
            "x-help": "A sales_navigator_profile_id should start with 'ACo', 'ACo' or 'ACr'"
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "sales_navigator_profile_id"
        ]
      },
      "LinkedinPeopleidFromSalesnavigatoridOutput": {
        "type": "object",
        "properties": {
          "linkedin_profile_id": {
            "type": "integer",
            "description": "A \"null\" value mean that the id does not exists."
          }
        }
      },
      "LinkedinSearchCompaniesInput": {
        "type": "object",
        "properties": {
          "linkedin_company_search_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/search\\/results\\/companies\\/\\?\\S+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Company Search URL should start with 'https://www.linkedin.com/search/results/companies'",
            "x-primary": true,
            "x-help": "A LinkedIn Company Search URL should start with 'https://www.linkedin.com/search/results/companies'",
            "x-variations": [
              "linkedin_company_search_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_company_search_url"
        ]
      },
      "LinkedinSearchCompaniesOutput": {
        "type": "object",
        "properties": {
          "company_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "short_description": {
            "type": "string"
          },
          "followers": {
            "type": "string"
          },
          "linkedin_company_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_company_id": {
            "type": "string"
          },
          "linkedin_company_handle": {
            "type": "string"
          }
        }
      },
      "LinkedinSearchCompanyEmployeesInput": {
        "type": "object",
        "properties": {
          "linkedin_company_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:sales\\/)?(?:school|pub|company|showcase)\\/[\\w%-]+(?:\\/(?:\\w+)?)?/i",
            "type": "string",
            "description": "A LinkedIn Company URL should start with 'https://www.linkedin.com/sales/company', 'https://www.linkedin/showcase' 'https://www.linkedin.com/company' or 'https://www.linkedin.com/school'\"",
            "x-primary": true,
            "x-placeholder": "LinkedIn Company URL",
            "x-help": "A LinkedIn Company URL should start with 'https://www.linkedin.com/sales/company', 'https://www.linkedin/showcase' 'https://www.linkedin.com/company' or 'https://www.linkedin.com/school'\"",
            "x-variations": [
              "linkedin_company_url",
              "company_url",
              "current_company_url",
              "link"
            ]
          },
          "linkedin_company_id": {
            "type": "integer",
            "x-placeholder": "If you have a company ID.",
            "x-variations": [
              "company_id"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_company_url"
        ]
      },
      "LinkedinSearchCompanyEmployeesOutput": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string"
          },
          "headline": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "connection_degree": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "current_company": {
            "type": "string"
          },
          "profile_image_url": {
            "type": "string",
            "format": "uri"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "current_title": {
            "type": "string"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "linkedin_company_id": {
            "type": "string"
          },
          "linkedin_company_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "LinkedinSearchContentInput": {
        "type": "object",
        "properties": {
          "linkedin_content_search_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/search\\/results\\/content\\/\\?\\S+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Content Search URL should start with 'https://www.linkedin.com/search/results/content'",
            "x-primary": true,
            "x-help": "A LinkedIn Content Search URL should start with 'https://www.linkedin.com/search/results/content'"
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_content_search_url"
        ]
      },
      "LinkedinSearchContentOutput": {
        "type": "object",
        "properties": {
          "author_name": {
            "type": "string"
          },
          "content_text": {
            "type": "string"
          },
          "headline": {
            "type": "string"
          },
          "linkedin_post_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_post_id": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "comment_count": {
            "type": "integer"
          },
          "reaction_count": {
            "type": "integer"
          },
          "repost_count": {
            "type": "integer"
          },
          "published_time": {
            "type": "string"
          },
          "published_date": {
            "type": "string",
            "format": "date"
          },
          "profile_image_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "content_image_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_job_url": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "linkedin_company_id": {
            "type": "integer"
          }
        }
      },
      "LinkedinSearchEventsInput": {
        "type": "object",
        "properties": {
          "linkedin_event_search_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/search\\/results\\/events\\/\\?\\S+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Event Search URL should start with 'https://www.linkedin.com/search/results/events'",
            "x-primary": true,
            "x-help": "A LinkedIn Event Search URL should start with 'https://www.linkedin.com/search/results/events'",
            "x-variations": [
              "linkedin_event_search_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_event_search_url"
        ]
      },
      "LinkedinSearchEventsOutput": {
        "type": "object",
        "properties": {
          "event_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "linkedin_event_url": {
            "type": "string",
            "format": "uri"
          },
          "attendees": {
            "type": "string"
          },
          "linkedin_event_id": {
            "type": "string"
          }
        }
      },
      "LinkedinSearchGroupsInput": {
        "type": "object",
        "properties": {
          "linkedin_group_search_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/search\\/results\\/groups\\/\\?\\S+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Group Search URL should start with 'https://www.linkedin.com/search/results/groups'",
            "x-primary": true,
            "x-help": "A LinkedIn Group Search URL should start with 'https://www.linkedin.com/search/results/groups'",
            "x-variations": [
              "linkedin_group_search_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_group_search_url"
        ]
      },
      "LinkedinSearchGroupsOutput": {
        "type": "object",
        "properties": {
          "group_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "members": {
            "type": "string"
          },
          "linkedin_group_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_group_id": {
            "type": "string"
          }
        }
      },
      "LinkedinSearchJobsInput": {
        "type": "object",
        "properties": {
          "linkedin_job_search_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/jobs\\/search\\/?\\?\\S+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Job Search URL should start with 'https://www.linkedin.com/jobs/search/'",
            "x-primary": true,
            "x-help": "A LinkedIn Job Search URL should start with 'https://www.linkedin.com/jobs/search/'"
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_job_search_url"
        ]
      },
      "LinkedinSearchJobsOutput": {
        "type": "object",
        "properties": {
          "linkedin_job_id": {
            "type": "string"
          },
          "linkedin_job_url": {
            "type": "string",
            "format": "uri"
          },
          "sponsored": {
            "type": "boolean"
          },
          "linkedin_job_application_url": {
            "type": "string",
            "format": "uri"
          },
          "new": {
            "type": "boolean"
          },
          "job_location": {
            "type": "string"
          },
          "target_job_title": {
            "type": "string"
          },
          "remote": {
            "type": "boolean"
          },
          "listed_at": {
            "type": "string",
            "format": "date-time"
          },
          "expire_at": {
            "type": "string",
            "format": "date-time"
          },
          "source_domain": {
            "type": "string"
          },
          "initial_query": {
            "type": "string"
          },
          "applicants_count": {
            "type": "string"
          },
          "posted_at": {
            "type": "string"
          }
        }
      },
      "LinkedinSearchPeopleInput": {
        "type": "object",
        "properties": {
          "linkedin_people_search_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/search\\/results\\/(people|PEOPLE)\\/\\?\\S+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn People Search URL should start with 'https://www.linkedin.com/search/results/people'",
            "x-primary": true,
            "x-help": "A LinkedIn People Search URL should start with 'https://www.linkedin.com/search/results/people'",
            "x-variations": [
              "linkedin_people_search_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_people_search_url"
        ]
      },
      "LinkedinSearchPeopleOutput": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "headline": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "profile_image_url": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "connection_degree": {
            "type": "string"
          },
          "current_title": {
            "type": "string"
          },
          "linkedin_profile_handle": {
            "type": "string"
          },
          "shared_connection_search_url": {
            "type": "string",
            "format": "uri"
          },
          "number_shared_connections": {
            "type": "integer"
          },
          "shared_connection_profile_urls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "linkedin_people_post_search_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "LinkedinSearchSchoolsInput": {
        "type": "object",
        "properties": {
          "linkedin_school_search_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/search\\/results\\/schools\\/\\?\\S+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn School Search URL should start with 'https://www.linkedin.com/search/results/schools'",
            "x-primary": true,
            "x-help": "A LinkedIn School Search URL should start with 'https://www.linkedin.com/search/results/schools'",
            "x-variations": [
              "linkedin_school_search_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_school_search_url"
        ]
      },
      "LinkedinSearchSchoolsOutput": {
        "type": "object",
        "properties": {
          "school_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "members": {
            "type": "string"
          },
          "linkedin_school_url": {
            "type": "string"
          },
          "linkedin_school_id": {
            "type": "string"
          },
          "linkedin_school_handle": {
            "type": "string"
          }
        }
      },
      "LinkedinVisitCompanyInput": {
        "type": "object",
        "properties": {
          "linkedin_company_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:sales\\/)?(?:school|pub|company|showcase)\\/[\\w%-]+(?:\\/(?:\\w+)?)?/i",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Company URL should start with 'https://www.linkedin.com/sales/company', 'https://www.linkedin/showcase' 'https://www.linkedin.com/company' or 'https://www.linkedin.com/school'\"",
            "x-primary": true,
            "x-placeholder": "LinkedIn Company URL",
            "x-help": "A LinkedIn Company URL should start with 'https://www.linkedin.com/sales/company', 'https://www.linkedin/showcase' 'https://www.linkedin.com/company' or 'https://www.linkedin.com/school'\"",
            "x-variations": [
              "url",
              "company_url",
              "current_company_url",
              "link"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_company_url"
        ]
      },
      "LinkedinVisitCompanyOutput": {
        "type": "object",
        "properties": {
          "linkedin_company_id": {
            "type": "string"
          }
        }
      },
      "LinkedinVisitProfileInput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/(?:in|pub|sales\\/people|sales\\/lead)\\/[^\\s/]+/",
            "type": "string",
            "format": "uri",
            "description": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-primary": true,
            "x-placeholder": "LinkedIn People Profile URL",
            "x-help": "A LinkedIn Profile URL should start with 'https://www.linkedin.com/sales/people/', 'https://www.linkedin.com/sales/lead/', 'https://www.linkedin.com/pub/' or 'https://www.linkedin.com/in/'",
            "x-variations": [
              "url",
              "profile_url",
              "linkedin_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_profile_url"
        ]
      },
      "LinkedinVisitProfileOutput": {
        "type": "object",
        "properties": {
          "sales_navigator_profile_id": {
            "type": "string"
          }
        }
      },
      "LinkedinWithdrawInvitationsOutput": {
        "type": "object",
        "properties": {
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "RecruiterliteSearchPeopleInput": {
        "type": "object",
        "properties": {
          "linkedin_recruiter_search_url": {
            "pattern": "/(?:http(?:s)?:\\/\\/)(?:(?:www|\\w{2})\\.)?linkedin\\.com\\/talent\\/(?:hire\\/\\d+\\/discover\\/recruiterSearch|search)/",
            "description": "A LinkedIn Recruiter Search URL should start with 'https://www.linkedin.com/talent/hire/{id}/discover/recruiterSearch' or 'https://www.linkedin.com/talent/search'",
            "x-primary": true,
            "x-placeholder": "LinkedIn Recruiter Search URL",
            "x-help": "A LinkedIn Recruiter Search URL should start with 'https://www.linkedin.com/talent/hire/{id}/discover/recruiterSearch' or 'https://www.linkedin.com/talent/search'"
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "linkedin_recruiter_search_url"
        ]
      },
      "RecruiterliteSearchPeopleOutput": {
        "type": "object",
        "properties": {
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_id": {
            "type": "number"
          },
          "headline": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "connection_degree": {
            "type": "string"
          },
          "profile_image_url": {
            "type": "string",
            "format": "uri"
          },
          "job_seeker": {
            "type": "boolean"
          },
          "location": {
            "type": "string"
          },
          "educations": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "school_name": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                }
              }
            }
          },
          "experiences": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "company_id": {
                  "type": "string"
                },
                "company_name": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                },
                "job_title": {
                  "type": "string"
                },
                "linkedin_company_id": {
                  "type": "string"
                }
              }
            }
          },
          "linkedin_people_post_search_url": {
            "type": "string",
            "format": "uri"
          },
          "company_name": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          }
        }
      },
      "SalesnavigatorExtractAccountsListInput": {
        "type": "object",
        "properties": {
          "sales_navigator_company_list_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/sales\\/(lists\\/company.+|accounts|\\/dashboard)/",
            "type": "string",
            "format": "uri",
            "description": "A Sales Navigator Accounts List URL should start with 'https://www.linkedin.com/sales/lists/company'",
            "x-primary": true,
            "x-help": "A Sales Navigator Accounts List URL should start with 'https://www.linkedin.com/sales/lists/company'"
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "sales_navigator_company_list_url"
        ]
      },
      "SalesnavigatorExtractAccountsListOutput": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "sales_navigator_company_id": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "sales_navigator_employees_url": {
            "type": "string",
            "format": "uri"
          },
          "location": {
            "type": "string"
          },
          "number_employees": {
            "type": "string"
          },
          "sales_navigator_company_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_company_list_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "SalesnavigatorConnectProfileInput": {
        "type": "object",
        "properties": {
          "sales_navigator_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/sales\\/(people|lead)\\/.+/",
            "type": "string",
            "format": "uri",
            "description": "A Sales Navigator Profile URL should start with 'https://www.linkedin.com/sales/people/'",
            "x-primary": true,
            "x-help": "A Sales Navigator Profile URL should start with 'https://www.linkedin.com/sales/people/'",
            "x-variations": [
              "profile_url",
              "sales_navigator_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "sales_navigator_profile_url"
        ]
      },
      "SalesnavigatorConnectProfileOutput": {
        "type": "object",
        "properties": {
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "connected": {
            "type": "boolean"
          },
          "pending": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "SalesnavigatorExtractEmployeesCountInput": {
        "type": "object",
        "properties": {
          "sales_navigator_company_url": {
            "pattern": "/^^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/sales\\/company\\/.+/",
            "type": "string",
            "format": "uri",
            "description": "A Sales Navigator Company URL should start with 'https://www.linkedin.com/sales/company/'",
            "x-primary": true,
            "x-help": "A Sales Navigator Company URL should start with 'https://www.linkedin.com/sales/company/'"
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "sales_navigator_company_url"
        ]
      },
      "SalesnavigatorExtractEmployeesCountOutput": {
        "type": "object",
        "properties": {
          "sales_navigator_employee_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_company_id": {
            "type": "string"
          },
          "employee_median_tenure": {
            "type": "number"
          },
          "total_employee_count": {
            "type": "integer"
          },
          "monthly_headcounts": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "date_on": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "month": {
                      "type": "integer"
                    },
                    "year": {
                      "type": "integer"
                    },
                    "day": {
                      "type": "integer"
                    }
                  }
                },
                "employee_count": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "SalesnavigatorExtractEmployeesDistributionInput": {
        "type": "object",
        "properties": {
          "sales_navigator_company_url": {
            "pattern": "/^^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/sales\\/company\\/.+/",
            "type": "string",
            "format": "uri",
            "description": "A Sales Navigator Company URL should start with 'https://www.linkedin.com/sales/company/'",
            "x-primary": true,
            "x-help": "A Sales Navigator Company URL should start with 'https://www.linkedin.com/sales/company/'"
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "sales_navigator_company_url"
        ]
      },
      "SalesnavigatorExtractEmployeesDistributionOutput": {
        "type": "object",
        "properties": {
          "sales_navigator_company_id": {
            "type": "string"
          },
          "total_employee_count": {
            "type": "integer"
          },
          "departments": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string"
                },
                "headcount_total": {
                  "type": "integer"
                },
                "headcount_percentage": {
                  "type": "number"
                },
                "headcount_growth_3_months": {
                  "type": "integer"
                },
                "headcount_growth_6_months": {
                  "type": "integer"
                },
                "headcount_growth_12_months": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "SalesnavigatorExtractLeadsListInput": {
        "type": "object",
        "properties": {
          "sales_navigator_profile_list_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/sales\\/lists\\/people.+/",
            "type": "string",
            "format": "uri",
            "description": "A Sales Navigator Leads List URL should start with 'https://www.linkedin.com/sales/lists/people'",
            "x-primary": true,
            "x-help": "A Sales Navigator Leads List URL should start with 'https://www.linkedin.com/sales/lists/people'"
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "sales_navigator_profile_list_url"
        ]
      },
      "SalesnavigatorExtractLeadsListOutput": {
        "type": "object",
        "properties": {
          "company_name": {
            "type": "string"
          },
          "connection_degree": {
            "type": "integer"
          },
          "current_company": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "headline": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "location": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "profile_image_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_company_id": {
            "type": "string"
          },
          "sales_navigator_company_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "sales_navigator_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_search_url": {
            "type": "string",
            "format": "uri"
          },
          "tenure_end": {
            "type": "string"
          },
          "tenure_length": {
            "type": "string"
          },
          "tenure_start": {
            "type": "string"
          },
          "viewed": {
            "type": "boolean"
          },
          "linkedin_people_post_search_url": {
            "type": "string",
            "format": "uri"
          },
          "recently_hired": {
            "type": "boolean"
          },
          "recently_promoted": {
            "type": "boolean"
          },
          "sales_navigator_profile_list_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "SalesnavigatorInmailProfileInput": {
        "type": "object",
        "properties": {
          "sales_navigator_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/sales\\/(?:people|lead)\\/([\\w-]+),(?:name|NAME_SEARCH),([\\w-]+)/",
            "type": "string",
            "format": "uri",
            "description": "A Sales Navigator Profile URL should start with 'https://www.linkedin.com/sales/people/' or 'https://www.linkedin.com/sales/lead/' and should contain 'name' or 'NAME_SEARCH'",
            "x-primary": true,
            "x-placeholder": "Sales Navigator Profile URL",
            "x-help": "A Sales Navigator Profile URL should start with 'https://www.linkedin.com/sales/people/' or 'https://www.linkedin.com/sales/lead/' and should contain 'name' or 'NAME_SEARCH'",
            "x-variations": [
              "url",
              "profile_url",
              "linkedin_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "sales_navigator_profile_url"
        ]
      },
      "SalesnavigatorInmailProfileOutput": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "linkedin_thread_id": {
            "type": "string"
          },
          "linkedin_message_id": {
            "type": "string"
          }
        }
      },
      "SalesnavigatorSearchCompaniesInput": {
        "type": "object",
        "properties": {
          "sales_navigator_company_search_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/sales\\/search\\/company.+/",
            "type": "string",
            "format": "uri",
            "description": "A Sales Navigator Company Search URL should start with 'https://www.linkedin.com/sales/search/company'",
            "x-primary": true,
            "x-help": "A Sales Navigator Company Search URL should start with 'https://www.linkedin.com/sales/search/company'",
            "x-variations": [
              "sales_navigator_company_search_url",
              "sales_navigator_company_search_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "sales_navigator_company_search_url"
        ]
      },
      "SalesnavigatorSearchCompaniesOutput": {
        "type": "object",
        "properties": {
          "sales_navigator_search_url": {
            "type": "string",
            "format": "uri"
          },
          "company_name": {
            "type": "string"
          },
          "sales_navigator_company_url": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "number_employees": {
            "type": "string"
          },
          "sales_navigator_employees_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_company_id": {
            "type": "string"
          }
        }
      },
      "SalesnavigatorSearchCompanyEmployeesInput": {
        "type": "object",
        "properties": {
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "anyOf": [
          {
            "type": "object",
            "required": [
              "sales_navigator_company_url"
            ],
            "properties": {
              "sales_navigator_company_url": {
                "pattern": "/^^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/sales\\/company\\/.+/",
                "type": "string",
                "format": "uri",
                "description": "A Sales Navigator Company URL should start with 'https://www.linkedin.com/sales/company/'",
                "x-primary": true,
                "x-help": "A Sales Navigator Company URL should start with 'https://www.linkedin.com/sales/company/'",
                "x-variations": [
                  "sales_navigator_company_url",
                  "company_url"
                ],
                "x-required-variations": [
                  "linkedin_company_id"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "linkedin_company_id"
            ],
            "properties": {
              "linkedin_company_id": {
                "type": "string",
                "x-variations": [
                  "company_id",
                  "sales_navigator_company_id"
                ]
              }
            }
          }
        ],
        "additionalProperties": false
      },
      "SalesnavigatorSearchCompanyEmployeesOutput": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "sales_navigator_company_id": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "connection_degree": {
            "type": "integer"
          },
          "job_title": {
            "type": "string"
          },
          "headline": {
            "type": "string"
          },
          "profile_image_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_search_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "sales_navigator_company_url": {
            "type": "string",
            "format": "uri"
          },
          "location": {
            "type": "string"
          },
          "position_started_at": {
            "type": "string"
          },
          "linkedin_people_post_search_url": {
            "type": "string",
            "format": "uri"
          },
          "viewed": {
            "type": "boolean"
          },
          "tenure_start": {
            "type": "string"
          },
          "tenure_end": {
            "type": "string"
          },
          "tenure_length": {
            "type": "string"
          },
          "recently_hired": {
            "type": "boolean"
          },
          "recently_promoted": {
            "type": "boolean"
          },
          "current_company": {
            "type": "string"
          }
        }
      },
      "SalesnavigatorSearchMetricsInput": {
        "type": "object",
        "properties": {
          "sales_navigator_company_id": {
            "pattern": "/^\\d+$/",
            "type": "string",
            "x-primary": true
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "sales_navigator_company_id"
        ]
      },
      "SalesnavigatorSearchMetricsOutput": {
        "type": "object",
        "properties": {
          "sales_navigator_profile_search_url": {
            "type": "string",
            "format": "uri"
          },
          "sales_navigator_company_url": {
            "type": "string",
            "format": "uri"
          },
          "company_name": {
            "type": "string"
          },
          "sales_navigator_company_id": {
            "type": "integer"
          },
          "linkedin_company_url": {
            "type": "string",
            "format": "uri"
          },
          "total_leads": {
            "type": "integer"
          },
          "new_leads": {
            "type": "string"
          },
          "leads_posted_recently": {
            "type": "string"
          },
          "leads_mentioned_in_news": {
            "type": "string"
          },
          "leads_with_common_experience": {
            "type": "string"
          },
          "leads_following_your_company": {
            "type": "string"
          },
          "leads_past_colleague": {
            "type": "string"
          },
          "leads_teamlink_your_executives": {
            "type": "string"
          },
          "leads_viewed_profile_recently": {
            "type": "string"
          }
        }
      },
      "SalesnavigatorSearchPeopleInput": {
        "type": "object",
        "properties": {
          "sales_navigator_profile_search_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/sales\\/search\\/people.+/",
            "type": "string",
            "format": "uri",
            "description": "A Sales Navigator Profile Search URL should start with 'https://www.linkedin.com/sales/search/people'",
            "x-primary": true,
            "x-help": "A Sales Navigator Profile Search URL should start with 'https://www.linkedin.com/sales/search/people'",
            "x-variations": [
              "sales_navigator_profile_search_url",
              "sales_navigator_employees_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "sales_navigator_profile_search_url"
        ]
      },
      "SalesnavigatorSearchPeopleOutput": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "sales_navigator_company_id": {
            "type": "string"
          },
          "linkedin_profile_id": {
            "type": "integer"
          },
          "connection_degree": {
            "type": "integer"
          },
          "job_title": {
            "type": "string"
          },
          "headline": {
            "type": "string"
          },
          "profile_image_url": {
            "type": "string",
            "format": "string"
          },
          "sales_navigator_search_url": {
            "type": "string",
            "format": "string"
          },
          "sales_navigator_profile_url": {
            "type": "string",
            "format": "string"
          },
          "linkedin_profile_url": {
            "type": "string",
            "format": "string"
          },
          "sales_navigator_profile_id": {
            "type": "string"
          },
          "sales_navigator_company_url": {
            "type": "string",
            "format": "string"
          },
          "location": {
            "type": "string"
          },
          "linkedin_people_post_search_url": {
            "type": "string",
            "format": "string"
          },
          "viewed": {
            "type": "boolean"
          },
          "tenure_start": {
            "type": "string"
          },
          "tenure_end": {
            "type": "string"
          },
          "tenure_length": {
            "type": "string"
          },
          "recently_hired": {
            "type": "boolean"
          },
          "recently_promoted": {
            "type": "boolean"
          },
          "current_company": {
            "type": "string"
          }
        }
      },
      "SalesnavigatorVisitCompanyInput": {
        "type": "object",
        "properties": {
          "sales_navigator_company_url": {
            "pattern": "/^^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/sales\\/company\\/.+/",
            "type": "string",
            "format": "uri",
            "description": "A Sales Navigator Company URL should start with 'https://www.linkedin.com/sales/company/'",
            "x-primary": true,
            "x-help": "A Sales Navigator Company URL should start with 'https://www.linkedin.com/sales/company/'"
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "sales_navigator_company_url"
        ]
      },
      "SalesnavigatorVisitCompanyOutput": {
        "type": "object",
        "properties": {
          "sales_navigator_company_id": {
            "type": "string"
          }
        }
      },
      "SalesnavigatorVisitProfileInput": {
        "type": "object",
        "properties": {
          "sales_navigator_profile_url": {
            "pattern": "/^https:\\/\\/(?:(www|[a-z]{2})\\.)?linkedin\\.com\\/sales\\/(people|lead)\\/.+/",
            "type": "string",
            "format": "uri",
            "description": "A Sales Navigator Profile URL should start with 'https://www.linkedin.com/sales/people/'",
            "x-primary": true,
            "x-help": "A Sales Navigator Profile URL should start with 'https://www.linkedin.com/sales/people/'",
            "x-variations": [
              "profile_url",
              "sales_navigator_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "sales_navigator_profile_url"
        ]
      },
      "SalesnavigatorVisitProfileOutput": {
        "type": "object",
        "properties": {
          "sales_navigator_profile_id": {
            "type": "string"
          }
        }
      },
      "TheforkExtractReviewsInput": {
        "type": "object",
        "properties": {
          "thefork_reviews_url": {
            "type": "string",
            "format": "uri",
            "pattern": "/\\.thefork\\.|\\.eltenedor\\.|\\.lafourchette\\.fr|\\.lafourchette\\.com/",
            "description": "Input should contain a valid restaurant id such as \"r667039\" and point towards a review page.",
            "x-includes": [
              ".thefork.",
              ".eltenedor.",
              ".lafourchette.fr",
              ".lafourchette.com"
            ],
            "x-primary": true,
            "x-help": "Input should contain a valid restaurant id such as \"r667039\" and point towards a review page.",
            "x-variations": [
              "property_url",
              "url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "thefork_reviews_url"
        ]
      },
      "TheforkExtractReviewsOutput": {
        "type": "object",
        "properties": {
          "author_name": {
            "type": "string"
          },
          "author_number_of_reviews": {
            "type": "integer"
          },
          "grade": {
            "type": "number"
          },
          "content": {
            "type": "string"
          },
          "review_id": {
            "type": "string"
          },
          "property_id": {
            "type": "string"
          },
          "property_url": {
            "type": "string",
            "format": "uri"
          },
          "answer": {
            "type": "string"
          },
          "answer_status": {
            "type": "string"
          },
          "experience_date": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "TripadvisorExtractHotelInput": {
        "type": "object",
        "properties": {
          "tripadvisor_hotel_url": {
            "pattern": "/(?:http(?:s)?:\\/\\/){1}(?:www\\.)?tripadvisor\\.(?:co\\.\\w{2,3}|\\w{2,3})\\/Hotel_Review/g",
            "type": "string",
            "format": "uri",
            "description": "Only compatible with Hotel URLs",
            "x-primary": true,
            "x-help": "Only compatible with Hotel URLs",
            "x-variations": [
              "link_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "tripadvisor_hotel_url"
        ]
      },
      "TripadvisorExtractHotelOutput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "grade": {
            "type": "number"
          },
          "ranking": {
            "type": "number"
          },
          "price_range": {
            "type": "string"
          },
          "number_reviews": {
            "type": "integer"
          },
          "awards": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "breakdown_grade": {
            "type": "object",
            "properties": {
              "cleanliness": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "rooms": {
                "type": "string"
              },
              "service": {
                "type": "string"
              },
              "sleep_quality": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "website": {
            "type": "string",
            "format": "uri"
          },
          "address": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "amenities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hidden_amenities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stars": {
            "type": "number"
          },
          "property_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "TripadvisorExtractRestaurantInput": {
        "type": "object",
        "properties": {
          "tripadvisor_restaurant_url": {
            "pattern": "/(?:http(?:s)?:\\/\\/){1}(?:www\\.)?tripadvisor\\.(?:co\\.\\w{2,3}|\\w{2,3})\\/Restaurant_Review/g",
            "type": "string",
            "format": "uri",
            "description": "Only compatible with Restaurant URLs",
            "x-primary": true,
            "x-help": "Only compatible with Restaurant URLs",
            "x-variations": [
              "link_url"
            ]
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "tripadvisor_restaurant_url"
        ]
      },
      "TripadvisorExtractRestaurantOutput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "grade": {
            "type": "number"
          },
          "price_range": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "number_reviews": {
            "type": "integer"
          },
          "awards": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "breakdown_grade": {
            "type": "object",
            "properties": {
              "atmosphere": {
                "type": "number"
              },
              "food": {
                "type": "number"
              },
              "service": {
                "type": "number"
              },
              "value": {
                "type": "number"
              }
            },
            "additionalProperties": false
          },
          "website": {
            "type": "string",
            "format": "uri"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "address": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "property_url": {
            "type": "string",
            "format": "uri"
          },
          "open_hours": {
            "type": "object",
            "properties": {
              "mon": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "open_time": {
                      "type": "string",
                      "format": "time"
                    },
                    "close_time": {
                      "type": "string",
                      "format": "time"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          }
        }
      },
      "TripadvisorExtractReviewsInput": {
        "type": "object",
        "properties": {
          "tripadvisor_reviews_url": {
            "pattern": "/(?:http(?:s)?:\\/\\/){1}(?:www\\.)?tripadvisor\\.(?:co\\.\\w{2,3}|\\w{2,3})\\/(?:Restaurant_|Hotel_|AttractionProduct|Attraction_)Review-g\\d+/g",
            "type": "string",
            "format": "uri",
            "description": "Input only compatible with URLs of types Restaurant, Attraction and Hotel",
            "x-primary": true,
            "x-help": "Input only compatible with URLs of types Restaurant, Attraction and Hotel"
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "tripadvisor_reviews_url"
        ]
      },
      "TripadvisorExtractReviewsOutput": {
        "type": "object",
        "properties": {
          "property": {
            "type": "string"
          },
          "tripadvisor_reviews_id": {
            "type": "string"
          },
          "tripadvisor_reviews_url": {
            "type": "string",
            "format": "uri"
          },
          "tripadvisor_reviewer_url": {
            "type": "string",
            "format": "uri"
          },
          "review_comment": {
            "type": "string"
          },
          "review_response": {
            "type": "string"
          },
          "reviewer_picture": {
            "type": "string",
            "format": "uri"
          },
          "experience_date": {
            "type": "string",
            "format": "date"
          },
          "reviewer_name": {
            "type": "string"
          },
          "review_date": {
            "type": "string",
            "format": "date"
          },
          "tripadvisor_review_url": {
            "type": "string",
            "format": "uri"
          },
          "review_title": {
            "type": "string"
          },
          "review_image": {
            "type": "string"
          },
          "tripadvisor_review_id": {
            "type": "number"
          },
          "review_rating": {
            "type": "number"
          }
        }
      },
      "TripadvisorSearchHotelsInput": {
        "type": "object",
        "properties": {
          "tripadvisor_search_url": {
            "pattern": "/(?:http(?:s)?:\\/\\/){1}(?:www\\.)?tripadvisor\\.(?:co\\.\\w{2,3}|\\w{2,3})\\/((?:FindRestaurants)|((?:Hotels|Restaurants|Attractions)-g\\d{3,}))/",
            "type": "string",
            "format": "uri",
            "description": "Url has to match \"tripadvisor[...]/Hotels-g\".",
            "x-primary": true,
            "x-help": "Url has to match \"tripadvisor[...]/Hotels-g\"."
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "tripadvisor_search_url"
        ]
      },
      "TripadvisorSearchHotelsOutput": {
        "type": "object",
        "properties": {
          "tripadvisor_hotel_url": {
            "type": "string",
            "format": "uri"
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "review_count": {
            "type": "integer"
          },
          "rating": {
            "type": "number"
          },
          "property_id": {
            "type": "string"
          }
        }
      },
      "TripadvisorSearchRestaurantsInput": {
        "type": "object",
        "properties": {
          "tripadvisor_search_url": {
            "pattern": "/(?:http(?:s)?:\\/\\/){1}(?:www\\.)?tripadvisor\\.(?:co\\.\\w{2,3}|\\w{2,3})\\/((?:FindRestaurants)|((?:Hotels|Restaurants|Attractions)-g\\d{3,}))/",
            "type": "string",
            "format": "uri",
            "description": "Url has to match \"tripadvisor[...]/Restaurants-g\".",
            "x-primary": true,
            "x-help": "Url has to match \"tripadvisor[...]/Restaurants-g\"."
          },
          "custom_data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom data (ex-metadata)"
          }
        },
        "additionalProperties": false,
        "required": [
          "tripadvisor_search_url"
        ]
      },
      "TripadvisorSearchRestaurantsOutput": {
        "type": "object",
        "properties": {
          "tripadvisor_restaurant_url": {
            "type": "string",
            "format": "uri"
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "review_count": {
            "type": "integer"
          },
          "rating": {
            "type": "number"
          },
          "property_id": {
            "type": "string"
          }
        }
      }
    }
  },
  "paths": {
    "/runs/callbacks": {
      "get": {
        "operationId": "getRunCallbacks",
        "summary": "Get run callbacks",
        "tags": [
          "public / runs"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "RUNNING",
                  "FAILED",
                  "SUCCESS"
                ]
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "status",
            "required": false
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "run_uid",
            "required": false
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 20,
              "default": 10
            },
            "in": "query",
            "name": "limit",
            "required": false
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "in": "query",
            "name": "offset",
            "required": false
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 128
              },
              "default": [
                "-created_at"
              ],
              "maxItems": 10
            },
            "examples": {
              "example1": {
                "value": [
                  "-created_at, status"
                ]
              },
              "example2": {
                "value": [
                  "-created_at",
                  "status"
                ]
              },
              "example3": {
                "value": [
                  "updated_at"
                ]
              }
            },
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "Sort by fields. Prefix with `-` for descending order. Default is ascending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the run callbacks",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns the run callbacks",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Run callback UUID"
                      },
                      "parent_uid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Run callback UUID",
                        "nullable": true
                      },
                      "retry_count": {
                        "type": "integer",
                        "description": "Retry count",
                        "default": 0
                      },
                      "created_at": {
                        "type": "string",
                        "description": "Created at"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "PENDING",
                          "RUNNING",
                          "FAILED",
                          "SUCCESS"
                        ],
                        "description": "Callback status"
                      },
                      "callback_url": {
                        "type": "string",
                        "description": "Callback URL"
                      },
                      "http_status": {
                        "type": "integer",
                        "description": "HTTP status code of the callback"
                      },
                      "batch_uid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Batch UUID"
                      },
                      "run_uid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Run UUID"
                      },
                      "workspace_uid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace UUID"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          }
        }
      }
    },
    "/runs/callbacks/{callback_uid}": {
      "get": {
        "operationId": "getRunCallback",
        "summary": "Get run callback by UUID",
        "tags": [
          "public / runs"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "name": "callback_uid",
            "required": true,
            "description": "Run callback UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the run callback",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns the run callback",
                  "type": "object",
                  "properties": {
                    "uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Run callback UUID"
                    },
                    "parent_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Run callback UUID",
                      "nullable": true
                    },
                    "retry_count": {
                      "type": "integer",
                      "description": "Retry count",
                      "default": 0
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Created at"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "PENDING",
                        "RUNNING",
                        "FAILED",
                        "SUCCESS"
                      ],
                      "description": "Callback status"
                    },
                    "callback_url": {
                      "type": "string",
                      "description": "Callback URL"
                    },
                    "http_status": {
                      "type": "integer",
                      "description": "HTTP status code of the callback"
                    },
                    "batch_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Batch UUID"
                    },
                    "run_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Run UUID"
                    },
                    "workspace_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Workspace UUID"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          }
        }
      }
    },
    "/runs/callbacks/{callback_uid}/replay": {
      "post": {
        "operationId": "replayRunCallback",
        "summary": "Replay a run callback",
        "tags": [
          "public / runs"
        ],
        "description": "Replay a run callback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "name": "callback_uid",
            "required": true,
            "description": "Run callback UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the replayed run callback",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns the replayed run callback",
                  "type": "object",
                  "properties": {
                    "uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Run callback UUID"
                    },
                    "parent_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Run callback UUID",
                      "nullable": true
                    },
                    "retry_count": {
                      "type": "integer",
                      "description": "Retry count",
                      "default": 0
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Created at"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "PENDING",
                        "RUNNING",
                        "FAILED",
                        "SUCCESS"
                      ],
                      "description": "Callback status"
                    },
                    "callback_url": {
                      "type": "string",
                      "description": "Callback URL"
                    },
                    "http_status": {
                      "type": "integer",
                      "description": "HTTP status code of the callback"
                    },
                    "batch_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Batch UUID"
                    },
                    "run_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Run UUID"
                    },
                    "workspace_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Workspace UUID"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          }
        }
      }
    },
    "/runs": {
      "get": {
        "operationId": "getRuns",
        "summary": "Get runs",
        "tags": [
          "public / runs"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CREATED",
                  "INVALID",
                  "QUEUED",
                  "SCHEDULED",
                  "BLOCKED",
                  "STOPPED",
                  "RUNNING",
                  "FAILED",
                  "PARTIAL_SUCCEEDED",
                  "SUCCEEDED"
                ]
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "status",
            "required": false
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "action_name",
            "required": false
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "LIVE",
                  "ASYNC"
                ]
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "execution_mode",
            "required": false
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "uid",
            "required": false
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "user_uid",
            "required": false
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "workspace_uid",
            "required": false
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "in": "query",
            "name": "limit",
            "required": false
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "in": "query",
            "name": "offset",
            "required": false
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 128
              },
              "default": [
                "created_at"
              ],
              "maxItems": 10
            },
            "examples": {
              "example1": {
                "value": [
                  "-created_at, status"
                ]
              },
              "example2": {
                "value": [
                  "-created_at",
                  "status"
                ]
              },
              "example3": {
                "value": [
                  "updated_at"
                ]
              }
            },
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "Sort by fields. Prefix with `-` for descending order. Default is ascending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the runs",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns the runs",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Run ID"
                      },
                      "uid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Run UUID"
                      },
                      "action_id": {
                        "type": "integer",
                        "description": "Action ID"
                      },
                      "action_name": {
                        "type": "string",
                        "description": "Action name"
                      },
                      "retry_count": {
                        "type": "integer",
                        "description": "Retry count",
                        "default": 0
                      },
                      "user_uid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Member/User UUID"
                      },
                      "workspace_uid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace UUID"
                      },
                      "execution_mode": {
                        "type": "string",
                        "enum": [
                          "LIVE",
                          "ASYNC"
                        ],
                        "description": "Execution mode",
                        "nullable": true
                      },
                      "last_error": {
                        "type": "object",
                        "description": "Last error message",
                        "properties": {
                          "label": {
                            "type": "string",
                            "description": "Label"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message"
                          }
                        },
                        "nullable": true
                      },
                      "callback": {
                        "type": "object",
                        "description": "Callback (only for async runs)",
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "Callback URL"
                          }
                        },
                        "nullable": true
                      },
                      "status": {
                        "type": "string",
                        "description": "Run status",
                        "enum": [
                          "CREATED",
                          "INVALID",
                          "QUEUED",
                          "SCHEDULED",
                          "BLOCKED",
                          "STOPPED",
                          "RUNNING",
                          "FAILED",
                          "PARTIAL_SUCCEEDED",
                          "SUCCEEDED"
                        ],
                        "nullable": true
                      },
                      "postponed_until": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "If the run is postponed, this field indicates when it will be retried."
                      },
                      "started_at": {
                        "type": "string",
                        "description": "Started at",
                        "nullable": true
                      },
                      "finished_at": {
                        "type": "string",
                        "description": "Finished at",
                        "nullable": true
                      },
                      "synced_at": {
                        "type": "string",
                        "description": "Synced at",
                        "nullable": true
                      },
                      "created_at": {
                        "type": "string",
                        "description": "Created at"
                      },
                      "updated_at": {
                        "type": "string",
                        "description": "Updated at",
                        "nullable": true
                      }
                    },
                    "additionalProperties": false
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          }
        }
      }
    },
    "/runs/{run_uid}": {
      "get": {
        "operationId": "getRun",
        "summary": "Get run by UUID",
        "tags": [
          "public / runs"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "name": "run_uid",
            "required": true,
            "description": "Run UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the run",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns the run",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Run ID"
                    },
                    "uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Run UUID"
                    },
                    "action_id": {
                      "type": "integer",
                      "description": "Action ID"
                    },
                    "action_name": {
                      "type": "string",
                      "description": "Action name"
                    },
                    "retry_count": {
                      "type": "integer",
                      "description": "Retry count",
                      "default": 0
                    },
                    "user_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Member/User UUID"
                    },
                    "workspace_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Workspace UUID"
                    },
                    "execution_mode": {
                      "type": "string",
                      "enum": [
                        "LIVE",
                        "ASYNC"
                      ],
                      "description": "Execution mode",
                      "nullable": true
                    },
                    "last_error": {
                      "type": "object",
                      "description": "Last error message",
                      "properties": {
                        "label": {
                          "type": "string",
                          "description": "Label"
                        },
                        "message": {
                          "type": "string",
                          "description": "Message"
                        }
                      },
                      "nullable": true
                    },
                    "callback": {
                      "type": "object",
                      "description": "Callback (only for async runs)",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "Callback URL"
                        }
                      },
                      "nullable": true
                    },
                    "status": {
                      "type": "string",
                      "description": "Run status",
                      "enum": [
                        "CREATED",
                        "INVALID",
                        "QUEUED",
                        "SCHEDULED",
                        "BLOCKED",
                        "STOPPED",
                        "RUNNING",
                        "FAILED",
                        "PARTIAL_SUCCEEDED",
                        "SUCCEEDED"
                      ],
                      "nullable": true
                    },
                    "postponed_until": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "If the run is postponed, this field indicates when it will be retried."
                    },
                    "started_at": {
                      "type": "string",
                      "description": "Started at",
                      "nullable": true
                    },
                    "finished_at": {
                      "type": "string",
                      "description": "Finished at",
                      "nullable": true
                    },
                    "synced_at": {
                      "type": "string",
                      "description": "Synced at",
                      "nullable": true
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Created at"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Updated at",
                      "nullable": true
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          }
        }
      }
    },
    "/runs/{run_uid}/resume": {
      "post": {
        "operationId": "manageRun",
        "summary": "Resume a run",
        "tags": [
          "public / runs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "name": "run_uid",
            "required": true,
            "description": "Run UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the run",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns the run",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Run ID"
                    },
                    "uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Run UUID"
                    },
                    "action_id": {
                      "type": "integer",
                      "description": "Action ID"
                    },
                    "action_name": {
                      "type": "string",
                      "description": "Action name"
                    },
                    "retry_count": {
                      "type": "integer",
                      "description": "Retry count",
                      "default": 0
                    },
                    "user_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Member/User UUID"
                    },
                    "workspace_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Workspace UUID"
                    },
                    "execution_mode": {
                      "type": "string",
                      "enum": [
                        "LIVE",
                        "ASYNC"
                      ],
                      "description": "Execution mode",
                      "nullable": true
                    },
                    "last_error": {
                      "type": "object",
                      "description": "Last error message",
                      "properties": {
                        "label": {
                          "type": "string",
                          "description": "Label"
                        },
                        "message": {
                          "type": "string",
                          "description": "Message"
                        }
                      },
                      "nullable": true
                    },
                    "callback": {
                      "type": "object",
                      "description": "Callback (only for async runs)",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "Callback URL"
                        }
                      },
                      "nullable": true
                    },
                    "status": {
                      "type": "string",
                      "description": "Run status",
                      "enum": [
                        "CREATED",
                        "INVALID",
                        "QUEUED",
                        "SCHEDULED",
                        "BLOCKED",
                        "STOPPED",
                        "RUNNING",
                        "FAILED",
                        "PARTIAL_SUCCEEDED",
                        "SUCCEEDED"
                      ],
                      "nullable": true
                    },
                    "postponed_until": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "If the run is postponed, this field indicates when it will be retried."
                    },
                    "started_at": {
                      "type": "string",
                      "description": "Started at",
                      "nullable": true
                    },
                    "finished_at": {
                      "type": "string",
                      "description": "Finished at",
                      "nullable": true
                    },
                    "synced_at": {
                      "type": "string",
                      "description": "Synced at",
                      "nullable": true
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Created at"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Updated at",
                      "nullable": true
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          }
        }
      }
    },
    "/schedules": {
      "get": {
        "operationId": "getSchedules",
        "summary": "Get scheduled runs",
        "tags": [
          "public / schedules"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "uid",
            "required": false,
            "description": "Scheduled run status"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "CANCELLED",
                  "PAUSED",
                  "COMPLETED"
                ]
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "status",
            "required": false,
            "description": "Scheduled run status"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "user_uid",
            "required": false,
            "description": "User UUID"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "workspace_uid",
            "required": false,
            "description": "Workspace UUID"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "action_name",
            "required": false,
            "description": "Action name"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "next_execution_at",
            "required": false,
            "description": "Next execution at"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "last_executed_at",
            "required": false,
            "description": "Last executed at"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "created_at",
            "required": false,
            "description": "Created at"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              },
              "minItems": 1,
              "nullable": true
            },
            "in": "query",
            "name": "updated_at",
            "required": false,
            "description": "Updated at"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "in": "query",
            "name": "limit",
            "required": false
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "in": "query",
            "name": "offset",
            "required": false
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 128
              },
              "default": [
                "created_at"
              ],
              "maxItems": 10
            },
            "examples": {
              "example1": {
                "value": [
                  "-next_execution_at, status"
                ]
              },
              "example2": {
                "value": [
                  "-created_at",
                  "status"
                ]
              },
              "example3": {
                "value": [
                  "updated_at"
                ]
              },
              "example4": {
                "value": [
                  "-action_name"
                ]
              }
            },
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "Sort by fields. Prefix with `-` for descending order. Default is ascending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the scheduled runs",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns the scheduled runs",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Scheduled Run UUID"
                      },
                      "action_id": {
                        "type": "integer",
                        "description": "Action ID"
                      },
                      "action_name": {
                        "type": "string",
                        "description": "Action name"
                      },
                      "user_uid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Member/User UUID"
                      },
                      "workspace_uid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace UUID"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "ACTIVE",
                          "CANCELLED",
                          "PAUSED",
                          "COMPLETED"
                        ],
                        "nullable": true,
                        "description": "Scheduled run status"
                      },
                      "postponed_until": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "If the run is postponed, this field indicates when it will be retried."
                      },
                      "cron": {
                        "type": "string",
                        "description": "Cron expression for the scheduled run (POSIX format)",
                        "nullable": true
                      },
                      "timezone": {
                        "type": "string",
                        "description": "Timezone for the scheduled run (IANA timezone format)",
                        "nullable": true
                      },
                      "next_execution_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Next execution at",
                        "nullable": true
                      },
                      "last_executed_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Last executed at",
                        "nullable": true
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Created at",
                        "nullable": true
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Updated at",
                        "nullable": true
                      }
                    },
                    "additionalProperties": false
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{scheduled_run_uid}": {
      "get": {
        "operationId": "getSchedule",
        "summary": "Get scheduled run by UUID",
        "tags": [
          "public / schedules"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "name": "scheduled_run_uid",
            "required": true,
            "description": "Scheduled run UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the scheduled run",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns the scheduled run",
                  "type": "object",
                  "properties": {
                    "uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Scheduled Run UUID"
                    },
                    "action_id": {
                      "type": "integer",
                      "description": "Action ID"
                    },
                    "action_name": {
                      "type": "string",
                      "description": "Action name"
                    },
                    "user_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Member/User UUID"
                    },
                    "workspace_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Workspace UUID"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "ACTIVE",
                        "CANCELLED",
                        "PAUSED",
                        "COMPLETED"
                      ],
                      "nullable": true,
                      "description": "Scheduled run status"
                    },
                    "postponed_until": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "If the run is postponed, this field indicates when it will be retried."
                    },
                    "cron": {
                      "type": "string",
                      "description": "Cron expression for the scheduled run (POSIX format)",
                      "nullable": true
                    },
                    "timezone": {
                      "type": "string",
                      "description": "Timezone for the scheduled run (IANA timezone format)",
                      "nullable": true
                    },
                    "next_execution_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Next execution at",
                      "nullable": true
                    },
                    "last_executed_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Last executed at",
                      "nullable": true
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Created at",
                      "nullable": true
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Updated at",
                      "nullable": true
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{scheduled_run_uid}/{action}": {
      "post": {
        "operationId": "manageSchedule",
        "summary": "Update the status of a scheduled run",
        "tags": [
          "public / schedules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "name": "scheduled_run_uid",
            "required": true,
            "description": "Scheduled run UUID"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "resume",
                "cancel",
                "pause"
              ]
            },
            "in": "path",
            "name": "action",
            "required": true,
            "description": "With this action, you can resume, cancel or pause the scheduled run."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the scheduled runs",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns the scheduled runs",
                  "type": "object",
                  "properties": {
                    "uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Scheduled Run UUID"
                    },
                    "action_id": {
                      "type": "integer",
                      "description": "Action ID"
                    },
                    "action_name": {
                      "type": "string",
                      "description": "Action name"
                    },
                    "user_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Member/User UUID"
                    },
                    "workspace_uid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Workspace UUID"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "ACTIVE",
                        "CANCELLED",
                        "PAUSED",
                        "COMPLETED"
                      ],
                      "nullable": true,
                      "description": "Scheduled run status"
                    },
                    "postponed_until": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "If the run is postponed, this field indicates when it will be retried."
                    },
                    "cron": {
                      "type": "string",
                      "description": "Cron expression for the scheduled run (POSIX format)",
                      "nullable": true
                    },
                    "timezone": {
                      "type": "string",
                      "description": "Timezone for the scheduled run (IANA timezone format)",
                      "nullable": true
                    },
                    "next_execution_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Next execution at",
                      "nullable": true
                    },
                    "last_executed_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Last executed at",
                      "nullable": true
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Created at",
                      "nullable": true
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Updated at",
                      "nullable": true
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/def-0"
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-download-attachment": {
      "get": {
        "summary": "Download LinkedIn attachment",
        "tags": [
          "actions / linkedin"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            },
            "in": "query",
            "name": "identity_id",
            "required": false,
            "description": "Identity ID"
          },
          {
            "schema": {
              "type": "string",
              "format": "uri",
              "pattern": "^https://www.linkedin.com/dms/"
            },
            "in": "query",
            "name": "url",
            "required": true,
            "description": "URL to download"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/actions/googlemaps-extract-place/run/live": {
      "post": {
        "summary": "Run googlemaps-extract-place action live",
        "tags": [
          "actions / googlemaps"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "country": {
                        "type": "string",
                        "title": "Country",
                        "enum": [
                          "US",
                          "FR",
                          "DE",
                          "ES",
                          "UK",
                          "BE",
                          "BR",
                          "IN",
                          "TH",
                          "CA",
                          "AU",
                          "IT"
                        ],
                        "default": "US",
                        "description": "The country you wish to search from approximate geolocation. If you want to search near an area, you can use the keyword near in your query.",
                        "x-display-widget": "select"
                      },
                      "language": {
                        "type": "string",
                        "title": "Language",
                        "enum": [
                          "en",
                          "fr",
                          "it",
                          "de",
                          "es",
                          "pt"
                        ],
                        "default": "en",
                        "description": "The language you wish to search in.",
                        "x-display-widget": "select"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "input": {
                    "$ref": "#/components/schemas/GooglemapsExtractPlaceInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GooglemapsExtractPlaceOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "googlemapsExtractPlace"
      }
    },
    "/actions/googlemaps-extract-place/run/async": {
      "post": {
        "summary": "Run googlemaps-extract-place action asynchronously",
        "tags": [
          "actions / googlemaps"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "country": {
                        "type": "string",
                        "title": "Country",
                        "enum": [
                          "US",
                          "FR",
                          "DE",
                          "ES",
                          "UK",
                          "BE",
                          "BR",
                          "IN",
                          "TH",
                          "CA",
                          "AU",
                          "IT"
                        ],
                        "default": "US",
                        "description": "The country you wish to search from approximate geolocation. If you want to search near an area, you can use the keyword near in your query.",
                        "x-display-widget": "select"
                      },
                      "language": {
                        "type": "string",
                        "title": "Language",
                        "enum": [
                          "en",
                          "fr",
                          "it",
                          "de",
                          "es",
                          "pt"
                        ],
                        "default": "en",
                        "description": "The language you wish to search in.",
                        "x-display-widget": "select"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GooglemapsExtractPlaceInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "googlemapsExtractPlaceAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/GooglemapsExtractPlaceInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/GooglemapsExtractPlaceOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/googlemaps-extract-place/run/schedule": {
      "post": {
        "summary": "Schedule googlemaps-extract-place action",
        "tags": [
          "actions / googlemaps"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "country": {
                        "type": "string",
                        "title": "Country",
                        "enum": [
                          "US",
                          "FR",
                          "DE",
                          "ES",
                          "UK",
                          "BE",
                          "BR",
                          "IN",
                          "TH",
                          "CA",
                          "AU",
                          "IT"
                        ],
                        "default": "US",
                        "description": "The country you wish to search from approximate geolocation. If you want to search near an area, you can use the keyword near in your query.",
                        "x-display-widget": "select"
                      },
                      "language": {
                        "type": "string",
                        "title": "Language",
                        "enum": [
                          "en",
                          "fr",
                          "it",
                          "de",
                          "es",
                          "pt"
                        ],
                        "default": "en",
                        "description": "The language you wish to search in.",
                        "x-display-widget": "select"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GooglemapsExtractPlaceInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "googlemapsExtractPlaceSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/GooglemapsExtractPlaceInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/GooglemapsExtractPlaceOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/googlemaps-search-places/run/live": {
      "post": {
        "summary": "Run googlemaps-search-places action live",
        "tags": [
          "actions / googlemaps"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "country": {
                        "type": "string",
                        "title": "Country",
                        "enum": [
                          "US",
                          "FR",
                          "DE",
                          "ES",
                          "UK",
                          "BE",
                          "BR",
                          "IN",
                          "TH",
                          "CA",
                          "AU",
                          "IT"
                        ],
                        "default": "US",
                        "description": "The country you wish to search from approximate geolocation. If you want to search near an area, you can use the keyword near in your query.",
                        "x-display-widget": "select"
                      },
                      "language": {
                        "type": "string",
                        "title": "Language",
                        "enum": [
                          "en",
                          "fr",
                          "it",
                          "de",
                          "es",
                          "pt"
                        ],
                        "default": "en",
                        "description": "The language you wish to search in.",
                        "x-display-widget": "select"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "input": {
                    "$ref": "#/components/schemas/GooglemapsSearchPlacesInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 20,
              "maximum": 20
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Returned by some Actions to support cursor-based pagination; pass it as a query param to continue where the last request ended. Omit if not present — it means there are no more results.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GooglemapsSearchPlacesOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "googlemapsSearchPlaces"
      }
    },
    "/actions/googlemaps-search-places/run/async": {
      "post": {
        "summary": "Run googlemaps-search-places action asynchronously",
        "tags": [
          "actions / googlemaps"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "country": {
                        "type": "string",
                        "title": "Country",
                        "enum": [
                          "US",
                          "FR",
                          "DE",
                          "ES",
                          "UK",
                          "BE",
                          "BR",
                          "IN",
                          "TH",
                          "CA",
                          "AU",
                          "IT"
                        ],
                        "default": "US",
                        "description": "The country you wish to search from approximate geolocation. If you want to search near an area, you can use the keyword near in your query.",
                        "x-display-widget": "select"
                      },
                      "language": {
                        "type": "string",
                        "title": "Language",
                        "enum": [
                          "en",
                          "fr",
                          "it",
                          "de",
                          "es",
                          "pt"
                        ],
                        "default": "en",
                        "description": "The language you wish to search in.",
                        "x-display-widget": "select"
                      },
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum results",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 1,
                        "description": "The maximum number of results to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GooglemapsSearchPlacesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "googlemapsSearchPlacesAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/GooglemapsSearchPlacesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/GooglemapsSearchPlacesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/googlemaps-search-places/run/schedule": {
      "post": {
        "summary": "Schedule googlemaps-search-places action",
        "tags": [
          "actions / googlemaps"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "country": {
                        "type": "string",
                        "title": "Country",
                        "enum": [
                          "US",
                          "FR",
                          "DE",
                          "ES",
                          "UK",
                          "BE",
                          "BR",
                          "IN",
                          "TH",
                          "CA",
                          "AU",
                          "IT"
                        ],
                        "default": "US",
                        "description": "The country you wish to search from approximate geolocation. If you want to search near an area, you can use the keyword near in your query.",
                        "x-display-widget": "select"
                      },
                      "language": {
                        "type": "string",
                        "title": "Language",
                        "enum": [
                          "en",
                          "fr",
                          "it",
                          "de",
                          "es",
                          "pt"
                        ],
                        "default": "en",
                        "description": "The language you wish to search in.",
                        "x-display-widget": "select"
                      },
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum results",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 1,
                        "description": "The maximum number of results to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GooglemapsSearchPlacesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "googlemapsSearchPlacesSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/GooglemapsSearchPlacesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/GooglemapsSearchPlacesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/googlemaps-extract-reviews/run/live": {
      "post": {
        "summary": "Run googlemaps-extract-reviews action live",
        "tags": [
          "actions / googlemaps"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "country": {
                        "type": "string",
                        "title": "Country",
                        "enum": [
                          "US",
                          "FR",
                          "DE",
                          "ES",
                          "UK",
                          "BE",
                          "BR",
                          "IN",
                          "TH",
                          "CA",
                          "AU",
                          "IT"
                        ],
                        "default": "US",
                        "description": "The country you wish to search from approximate geolocation. If you want to search near an area, you can use the keyword near in your query.",
                        "x-display-widget": "select"
                      },
                      "language": {
                        "type": "string",
                        "title": "Language",
                        "enum": [
                          "en",
                          "fr",
                          "it",
                          "de",
                          "es",
                          "pt"
                        ],
                        "default": "en",
                        "description": "The language you wish to search in.",
                        "x-display-widget": "select"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "input": {
                    "$ref": "#/components/schemas/GooglemapsExtractReviewsInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 10
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Returned by some Actions to support cursor-based pagination; pass it as a query param to continue where the last request ended. Omit if not present — it means there are no more results.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GooglemapsExtractReviewsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "googlemapsExtractReviews"
      }
    },
    "/actions/googlemaps-extract-reviews/run/async": {
      "post": {
        "summary": "Run googlemaps-extract-reviews action asynchronously",
        "tags": [
          "actions / googlemaps"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "country": {
                        "type": "string",
                        "title": "Country",
                        "enum": [
                          "US",
                          "FR",
                          "DE",
                          "ES",
                          "UK",
                          "BE",
                          "BR",
                          "IN",
                          "TH",
                          "CA",
                          "AU",
                          "IT"
                        ],
                        "default": "US",
                        "description": "The country you wish to search from approximate geolocation. If you want to search near an area, you can use the keyword near in your query.",
                        "x-display-widget": "select"
                      },
                      "language": {
                        "type": "string",
                        "title": "Language",
                        "enum": [
                          "en",
                          "fr",
                          "it",
                          "de",
                          "es",
                          "pt"
                        ],
                        "default": "en",
                        "description": "The language you wish to search in.",
                        "x-display-widget": "select"
                      },
                      "max_results": {
                        "type": "number",
                        "default": 100,
                        "maximum": 10000,
                        "minimum": 0,
                        "description": "The maximum number of results to extract",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GooglemapsExtractReviewsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "googlemapsExtractReviewsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/GooglemapsExtractReviewsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/GooglemapsExtractReviewsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/googlemaps-extract-reviews/run/schedule": {
      "post": {
        "summary": "Schedule googlemaps-extract-reviews action",
        "tags": [
          "actions / googlemaps"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "country": {
                        "type": "string",
                        "title": "Country",
                        "enum": [
                          "US",
                          "FR",
                          "DE",
                          "ES",
                          "UK",
                          "BE",
                          "BR",
                          "IN",
                          "TH",
                          "CA",
                          "AU",
                          "IT"
                        ],
                        "default": "US",
                        "description": "The country you wish to search from approximate geolocation. If you want to search near an area, you can use the keyword near in your query.",
                        "x-display-widget": "select"
                      },
                      "language": {
                        "type": "string",
                        "title": "Language",
                        "enum": [
                          "en",
                          "fr",
                          "it",
                          "de",
                          "es",
                          "pt"
                        ],
                        "default": "en",
                        "description": "The language you wish to search in.",
                        "x-display-widget": "select"
                      },
                      "max_results": {
                        "type": "number",
                        "default": 100,
                        "maximum": 10000,
                        "minimum": 0,
                        "description": "The maximum number of results to extract",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GooglemapsExtractReviewsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "googlemapsExtractReviewsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/GooglemapsExtractReviewsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/GooglemapsExtractReviewsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-accept-invitations/run/live": {
      "post": {
        "summary": "Run linkedin-accept-invitations action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 100,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinAcceptInvitationsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinAcceptInvitations"
      }
    },
    "/actions/linkedin-accept-invitations/run/async": {
      "post": {
        "summary": "Run linkedin-accept-invitations action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinAcceptInvitationsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinAcceptInvitationsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-accept-invitations/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-accept-invitations action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinAcceptInvitationsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinAcceptInvitationsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-archive-message/run/live": {
      "post": {
        "summary": "Run linkedin-archive-message action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinArchiveMessageInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinArchiveMessageOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinArchiveMessage"
      }
    },
    "/actions/linkedin-archive-message/run/async": {
      "post": {
        "summary": "Run linkedin-archive-message action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinArchiveMessageInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinArchiveMessageAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinArchiveMessageInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinArchiveMessageOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-archive-message/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-archive-message action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinArchiveMessageInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinArchiveMessageSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinArchiveMessageInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinArchiveMessageOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-comment-post/run/live": {
      "post": {
        "summary": "Run linkedin-comment-post action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "title": "Comment to post",
                        "default": 100,
                        "maximum": 5000,
                        "description": "The comment to post.",
                        "x-display-widget": "textarea"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinCommentPostInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinCommentPostOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinCommentPost"
      }
    },
    "/actions/linkedin-comment-post/run/async": {
      "post": {
        "summary": "Run linkedin-comment-post action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "title": "Comment to post",
                        "default": 100,
                        "maximum": 5000,
                        "description": "The comment to post.",
                        "x-display-widget": "textarea"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinCommentPostInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinCommentPostAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinCommentPostInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinCommentPostOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-comment-post/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-comment-post action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "title": "Comment to post",
                        "default": 100,
                        "maximum": 5000,
                        "description": "The comment to post.",
                        "x-display-widget": "textarea"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinCommentPostInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinCommentPostSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinCommentPostInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinCommentPostOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-connect-profile/run/live": {
      "post": {
        "summary": "Run linkedin-connect-profile action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "integer",
                        "title": "Message",
                        "default": "",
                        "description": "The message to send with the invitation.",
                        "x-display-widget": "textbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinConnectProfileInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinConnectProfileOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinConnectProfile"
      }
    },
    "/actions/linkedin-connect-profile/run/async": {
      "post": {
        "summary": "Run linkedin-connect-profile action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "integer",
                        "title": "Message",
                        "default": "",
                        "description": "The message to send with the invitation.",
                        "x-display-widget": "textbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinConnectProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinConnectProfileAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinConnectProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinConnectProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-connect-profile/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-connect-profile action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "integer",
                        "title": "Message",
                        "default": "",
                        "description": "The message to send with the invitation.",
                        "x-display-widget": "textbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinConnectProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinConnectProfileSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinConnectProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinConnectProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-company-affiliates/run/live": {
      "post": {
        "summary": "Run linkedin-extract-company-affiliates action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractCompanyAffiliatesInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractCompanyAffiliatesOutput"
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractCompanyAffiliates"
      }
    },
    "/actions/linkedin-extract-company-affiliates/run/async": {
      "post": {
        "summary": "Run linkedin-extract-company-affiliates action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractCompanyAffiliatesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractCompanyAffiliatesAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractCompanyAffiliatesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractCompanyAffiliatesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-company-affiliates/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-company-affiliates action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractCompanyAffiliatesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractCompanyAffiliatesSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractCompanyAffiliatesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractCompanyAffiliatesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-company/run/live": {
      "post": {
        "summary": "Run linkedin-extract-company action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractCompanyInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinExtractCompanyOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractCompany"
      }
    },
    "/actions/linkedin-extract-company/run/async": {
      "post": {
        "summary": "Run linkedin-extract-company action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractCompanyInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractCompanyAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractCompanyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractCompanyOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-company/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-company action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractCompanyInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractCompanySchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractCompanyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractCompanyOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-company-employees-insights/run/live": {
      "post": {
        "summary": "Run linkedin-extract-company-employees-insights action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "affiliates": {
                        "type": "boolean",
                        "title": "Affiliates",
                        "default": false,
                        "description": "Indicates whether the insights should include those from the company’s affiliated entities.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractCompanyEmployeesInsightsInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinExtractCompanyEmployeesInsightsOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractCompanyEmployeesInsights"
      }
    },
    "/actions/linkedin-extract-company-employees-insights/run/async": {
      "post": {
        "summary": "Run linkedin-extract-company-employees-insights action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "affiliates": {
                        "type": "boolean",
                        "title": "Affiliates",
                        "default": false,
                        "description": "Indicates whether the insights should include those from the company’s affiliated entities.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractCompanyEmployeesInsightsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractCompanyEmployeesInsightsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractCompanyEmployeesInsightsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractCompanyEmployeesInsightsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-company-employees-insights/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-company-employees-insights action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "affiliates": {
                        "type": "boolean",
                        "title": "Affiliates",
                        "default": false,
                        "description": "Indicates whether the insights should include those from the company’s affiliated entities.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractCompanyEmployeesInsightsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractCompanyEmployeesInsightsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractCompanyEmployeesInsightsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractCompanyEmployeesInsightsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-connections/run/live": {
      "post": {
        "summary": "Run linkedin-extract-connections action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 40,
              "minimum": 40,
              "maximum": 40
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractConnectionsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractConnections"
      }
    },
    "/actions/linkedin-extract-connections/run/async": {
      "post": {
        "summary": "Run linkedin-extract-connections action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "skip": {
                        "type": "integer",
                        "title": "Skip",
                        "default": 0,
                        "maximum": 30000,
                        "minimum": 0,
                        "description": "Number of connections to skip.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "maximum": 30000,
                        "minimum": 1,
                        "description": "The maximum number of connections to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractConnectionsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractConnectionsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-connections/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-connections action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "skip": {
                        "type": "integer",
                        "title": "Skip",
                        "default": 0,
                        "maximum": 30000,
                        "minimum": 0,
                        "description": "Number of connections to skip.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "maximum": 30000,
                        "minimum": 1,
                        "description": "The maximum number of connections to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractConnectionsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractConnectionsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-contact/run/live": {
      "post": {
        "summary": "Run linkedin-extract-contact action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractContactInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinExtractContactOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractContact"
      }
    },
    "/actions/linkedin-extract-contact/run/async": {
      "post": {
        "summary": "Run linkedin-extract-contact action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractContactInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractContactAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractContactInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractContactOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-contact/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-contact action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractContactInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractContactSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractContactInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractContactOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-conversations/run/live": {
      "post": {
        "summary": "Run linkedin-extract-conversations action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "read": {
                        "type": "boolean",
                        "title": "Read",
                        "default": true,
                        "description": "If we want to extract only unread message",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 20,
              "maximum": 20
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Returned by some Actions to support cursor-based pagination; pass it as a query param to continue where the last request ended. Omit if not present — it means there are no more results.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractConversationsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractConversations"
      }
    },
    "/actions/linkedin-extract-conversations/run/async": {
      "post": {
        "summary": "Run linkedin-extract-conversations action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Conversations",
                        "default": 100,
                        "maximum": 10000,
                        "minimum": 1,
                        "description": "The maximum number of conversations to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "read": {
                        "type": "boolean",
                        "title": "Read",
                        "default": true,
                        "description": "If we want to extract only unread message",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractConversationsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractConversationsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-conversations/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-conversations action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Conversations",
                        "default": 100,
                        "maximum": 10000,
                        "minimum": 1,
                        "description": "The maximum number of conversations to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "read": {
                        "type": "boolean",
                        "title": "Read",
                        "default": true,
                        "description": "If we want to extract only unread message",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractConversationsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractConversationsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-event/run/live": {
      "post": {
        "summary": "Run linkedin-extract-event action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractEventInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinExtractEventOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractEvent"
      }
    },
    "/actions/linkedin-extract-event/run/async": {
      "post": {
        "summary": "Run linkedin-extract-event action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractEventInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractEventAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractEventInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractEventOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-event/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-event action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractEventInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractEventSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractEventInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractEventOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-event-attendees/run/live": {
      "post": {
        "summary": "Run linkedin-extract-event-attendees action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractEventAttendeesInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractEventAttendeesOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractEventAttendees"
      }
    },
    "/actions/linkedin-extract-event-attendees/run/async": {
      "post": {
        "summary": "Run linkedin-extract-event-attendees action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractEventAttendeesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractEventAttendeesAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractEventAttendeesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractEventAttendeesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-event-attendees/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-event-attendees action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractEventAttendeesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractEventAttendeesSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractEventAttendeesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractEventAttendeesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-followers/run/live": {
      "post": {
        "summary": "Run linkedin-extract-followers action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 20,
              "maximum": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractFollowersOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractFollowers"
      }
    },
    "/actions/linkedin-extract-followers/run/async": {
      "post": {
        "summary": "Run linkedin-extract-followers action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Results",
                        "default": 200,
                        "maximum": 30000,
                        "minimum": 0,
                        "description": "The maximum number of followers to extract",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "page": {
                        "type": "integer",
                        "title": "Page to start extraction",
                        "default": 0,
                        "description": "The page you want to start to extract followers",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "title": "Max pages we want to extract",
                        "default": 0,
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractFollowersAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractFollowersOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-followers/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-followers action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Results",
                        "default": 200,
                        "maximum": 30000,
                        "minimum": 0,
                        "description": "The maximum number of followers to extract",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "page": {
                        "type": "integer",
                        "title": "Page to start extraction",
                        "default": 0,
                        "description": "The page you want to start to extract followers",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "title": "Max pages we want to extract",
                        "default": 0,
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractFollowersSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractFollowersOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-group-members/run/live": {
      "post": {
        "summary": "Run linkedin-extract-group-members action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "group_owner": {
                        "type": "boolean",
                        "title": "Extract the group owner",
                        "description": "If you only want to extract the owner from the group.",
                        "default": true,
                        "x-display-widget": "checkbox"
                      },
                      "group_member": {
                        "type": "boolean",
                        "title": "Extract group members",
                        "description": "If you only want to extract the members from the group.",
                        "default": true,
                        "x-display-widget": "checkbox"
                      },
                      "group_manager": {
                        "type": "boolean",
                        "title": "Extract group managers",
                        "description": "If you only want to extract managers from the group.",
                        "default": true,
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractGroupMembersInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractGroupMembersOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractGroupMembers"
      }
    },
    "/actions/linkedin-extract-group-members/run/async": {
      "post": {
        "summary": "Run linkedin-extract-group-members action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "skip": {
                        "type": "integer",
                        "title": "Skip members",
                        "default": null,
                        "minimum": 0,
                        "description": "If you want to skip a number of members, to extract more than 2500 members.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "group_owner": {
                        "type": "boolean",
                        "title": "Extract the group owner",
                        "description": "If you only want to extract the owner from the group.",
                        "default": true,
                        "x-display-widget": "checkbox"
                      },
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 100,
                        "maximum": 2500,
                        "minimum": 1,
                        "description": "Maximum number of results to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "group_member": {
                        "type": "boolean",
                        "title": "Extract group members",
                        "description": "If you only want to extract the members from the group.",
                        "default": true,
                        "x-display-widget": "checkbox"
                      },
                      "group_manager": {
                        "type": "boolean",
                        "title": "Extract group managers",
                        "description": "If you only want to extract managers from the group.",
                        "default": true,
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractGroupMembersInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractGroupMembersAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractGroupMembersInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractGroupMembersOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-group-members/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-group-members action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "skip": {
                        "type": "integer",
                        "title": "Skip members",
                        "default": null,
                        "minimum": 0,
                        "description": "If you want to skip a number of members, to extract more than 2500 members.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "group_owner": {
                        "type": "boolean",
                        "title": "Extract the group owner",
                        "description": "If you only want to extract the owner from the group.",
                        "default": true,
                        "x-display-widget": "checkbox"
                      },
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 100,
                        "maximum": 2500,
                        "minimum": 1,
                        "description": "Maximum number of results to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "group_member": {
                        "type": "boolean",
                        "title": "Extract group members",
                        "description": "If you only want to extract the members from the group.",
                        "default": true,
                        "x-display-widget": "checkbox"
                      },
                      "group_manager": {
                        "type": "boolean",
                        "title": "Extract group managers",
                        "description": "If you only want to extract managers from the group.",
                        "default": true,
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractGroupMembersInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractGroupMembersSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractGroupMembersInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractGroupMembersOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-job/run/live": {
      "post": {
        "summary": "Run linkedin-extract-job action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractJobInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinExtractJobOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractJob"
      }
    },
    "/actions/linkedin-extract-job/run/async": {
      "post": {
        "summary": "Run linkedin-extract-job action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractJobInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractJobAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractJobInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractJobOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-job/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-job action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractJobInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractJobSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractJobInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractJobOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-licenses-certifications/run/live": {
      "post": {
        "summary": "Run linkedin-extract-licenses-certifications action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractLicensesCertificationsInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 20,
              "maximum": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractLicensesCertificationsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractLicensesCertifications"
      }
    },
    "/actions/linkedin-extract-licenses-certifications/run/async": {
      "post": {
        "summary": "Run linkedin-extract-licenses-certifications action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractLicensesCertificationsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractLicensesCertificationsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractLicensesCertificationsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractLicensesCertificationsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-licenses-certifications/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-licenses-certifications action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractLicensesCertificationsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractLicensesCertificationsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractLicensesCertificationsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractLicensesCertificationsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-messages/run/live": {
      "post": {
        "summary": "Run linkedin-extract-messages action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractMessagesInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 20,
              "maximum": 20
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Returned by some Actions to support cursor-based pagination; pass it as a query param to continue where the last request ended. Omit if not present — it means there are no more results.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractMessagesOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractMessages"
      }
    },
    "/actions/linkedin-extract-messages/run/async": {
      "post": {
        "summary": "Run linkedin-extract-messages action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Max Results",
                        "default": 1000,
                        "minimum": 1,
                        "description": "The maximum number of messages to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractMessagesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractMessagesAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractMessagesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractMessagesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-messages/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-messages action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Max Results",
                        "default": 1000,
                        "minimum": 1,
                        "description": "The maximum number of messages to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractMessagesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractMessagesSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractMessagesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractMessagesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-messages-legacy/run/live": {
      "post": {
        "summary": "Run linkedin-extract-messages-legacy action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractMessagesLegacyInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinExtractMessagesLegacyOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractMessagesLegacy"
      }
    },
    "/actions/linkedin-extract-messages-legacy/run/async": {
      "post": {
        "summary": "Run linkedin-extract-messages-legacy action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractMessagesLegacyInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractMessagesLegacyAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractMessagesLegacyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractMessagesLegacyOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-messages-legacy/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-messages-legacy action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractMessagesLegacyInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractMessagesLegacySchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractMessagesLegacyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractMessagesLegacyOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-page-followers/run/live": {
      "post": {
        "summary": "Run linkedin-extract-page-followers action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractPageFollowersInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 40,
              "minimum": 40,
              "maximum": 40
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractPageFollowersOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPageFollowers"
      }
    },
    "/actions/linkedin-extract-page-followers/run/async": {
      "post": {
        "summary": "Run linkedin-extract-page-followers action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "skip_pages": {
                        "type": "integer",
                        "title": "Pages to Skip",
                        "default": 0,
                        "description": "How many followers pages to skip. '1' means that the first 40 connections are being skipped.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Results",
                        "default": 100,
                        "maximum": 30000,
                        "minimum": 0,
                        "description": "The maximum number of followers to extract per input",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPageFollowersInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPageFollowersAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPageFollowersInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPageFollowersOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-page-followers/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-page-followers action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "skip_pages": {
                        "type": "integer",
                        "title": "Pages to Skip",
                        "default": 0,
                        "description": "How many followers pages to skip. '1' means that the first 40 connections are being skipped.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Results",
                        "default": 100,
                        "maximum": 30000,
                        "minimum": 0,
                        "description": "The maximum number of followers to extract per input",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPageFollowersInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPageFollowersSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPageFollowersInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPageFollowersOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-people-comment-activity/run/live": {
      "post": {
        "summary": "Run linkedin-extract-people-comment-activity action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractPeopleCommentActivityInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 20,
              "maximum": 20
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Returned by some Actions to support cursor-based pagination; pass it as a query param to continue where the last request ended. Omit if not present — it means there are no more results.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractPeopleCommentActivityOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPeopleCommentActivity"
      }
    },
    "/actions/linkedin-extract-people-comment-activity/run/async": {
      "post": {
        "summary": "Run linkedin-extract-people-comment-activity action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 50,
                        "maximum": 500,
                        "minimum": 1,
                        "description": "The maximum number of activities (comments) to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPeopleCommentActivityInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPeopleCommentActivityAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPeopleCommentActivityInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPeopleCommentActivityOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-people-comment-activity/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-people-comment-activity action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 50,
                        "maximum": 500,
                        "minimum": 1,
                        "description": "The maximum number of activities (comments) to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPeopleCommentActivityInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPeopleCommentActivitySchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPeopleCommentActivityInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPeopleCommentActivityOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-people-post-activity/run/live": {
      "post": {
        "summary": "Run linkedin-extract-people-post-activity action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractPeoplePostActivityInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 20,
              "maximum": 20
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Returned by some Actions to support cursor-based pagination; pass it as a query param to continue where the last request ended. Omit if not present — it means there are no more results.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractPeoplePostActivityOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPeoplePostActivity"
      }
    },
    "/actions/linkedin-extract-people-post-activity/run/async": {
      "post": {
        "summary": "Run linkedin-extract-people-post-activity action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 50,
                        "maximum": 500,
                        "minimum": 1,
                        "description": "The maximum number of activities (posts) to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPeoplePostActivityInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPeoplePostActivityAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPeoplePostActivityInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPeoplePostActivityOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-people-post-activity/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-people-post-activity action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 50,
                        "maximum": 500,
                        "minimum": 1,
                        "description": "The maximum number of activities (posts) to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPeoplePostActivityInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPeoplePostActivitySchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPeoplePostActivityInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPeoplePostActivityOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-people/run/live": {
      "post": {
        "summary": "Run linkedin-extract-people action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "sections": {
                        "type": "boolean",
                        "title": "Sections",
                        "default": false,
                        "description": "Extract sections data.",
                        "x-display-widget": "checkbox"
                      },
                      "experiences": {
                        "type": "boolean",
                        "title": "Experiences",
                        "default": false,
                        "description": "Extract experiences data.",
                        "x-display-widget": "checkbox"
                      },
                      "skills": {
                        "type": "boolean",
                        "title": "Skills",
                        "default": false,
                        "description": "Extract skills data.",
                        "x-display-widget": "checkbox"
                      },
                      "highlights": {
                        "type": "boolean",
                        "title": "Highlights",
                        "default": false,
                        "description": "Extract highlights data.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractPeopleInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinExtractPeopleOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPeople"
      }
    },
    "/actions/linkedin-extract-people/run/async": {
      "post": {
        "summary": "Run linkedin-extract-people action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "sections": {
                        "type": "boolean",
                        "title": "Sections",
                        "default": false,
                        "description": "Extract sections data.",
                        "x-display-widget": "checkbox"
                      },
                      "experiences": {
                        "type": "boolean",
                        "title": "Experiences",
                        "default": false,
                        "description": "Extract experiences data.",
                        "x-display-widget": "checkbox"
                      },
                      "skills": {
                        "type": "boolean",
                        "title": "Skills",
                        "default": false,
                        "description": "Extract skills data.",
                        "x-display-widget": "checkbox"
                      },
                      "highlights": {
                        "type": "boolean",
                        "title": "Highlights",
                        "default": false,
                        "description": "Extract highlights data.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPeopleInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPeopleAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPeopleInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPeopleOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-people/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-people action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "sections": {
                        "type": "boolean",
                        "title": "Sections",
                        "default": false,
                        "description": "Extract sections data.",
                        "x-display-widget": "checkbox"
                      },
                      "experiences": {
                        "type": "boolean",
                        "title": "Experiences",
                        "default": false,
                        "description": "Extract experiences data.",
                        "x-display-widget": "checkbox"
                      },
                      "skills": {
                        "type": "boolean",
                        "title": "Skills",
                        "default": false,
                        "description": "Extract skills data.",
                        "x-display-widget": "checkbox"
                      },
                      "highlights": {
                        "type": "boolean",
                        "title": "Highlights",
                        "default": false,
                        "description": "Extract highlights data.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPeopleInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPeopleSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPeopleInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPeopleOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-people-reaction-activity/run/live": {
      "post": {
        "summary": "Run linkedin-extract-people-reaction-activity action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractPeopleReactionActivityInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 20,
              "maximum": 20
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Returned by some Actions to support cursor-based pagination; pass it as a query param to continue where the last request ended. Omit if not present — it means there are no more results.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractPeopleReactionActivityOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPeopleReactionActivity"
      }
    },
    "/actions/linkedin-extract-people-reaction-activity/run/async": {
      "post": {
        "summary": "Run linkedin-extract-people-reaction-activity action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 50,
                        "maximum": 500,
                        "minimum": 1,
                        "description": "The maximum number of activities (reactions) to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPeopleReactionActivityInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPeopleReactionActivityAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPeopleReactionActivityInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPeopleReactionActivityOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-people-reaction-activity/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-people-reaction-activity action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 50,
                        "maximum": 500,
                        "minimum": 1,
                        "description": "The maximum number of activities (reactions) to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPeopleReactionActivityInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPeopleReactionActivitySchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPeopleReactionActivityInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPeopleReactionActivityOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-post/run/live": {
      "post": {
        "summary": "Run linkedin-extract-post action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractPostInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinExtractPostOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPost"
      }
    },
    "/actions/linkedin-extract-post/run/async": {
      "post": {
        "summary": "Run linkedin-extract-post action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPostInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPostAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPostInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPostOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-post/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-post action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPostInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPostSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPostInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPostOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-post-commenters/run/live": {
      "post": {
        "summary": "Run linkedin-extract-post-commenters action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "sort_order": {
                        "type": "string",
                        "title": "The sort order, either by REVERSE_CHRONOLOGICAL or RELEVANCE.",
                        "enum": [
                          "newest",
                          "relevant"
                        ],
                        "default": "newest",
                        "description": "The sort order, either by REVERSE_CHRONOLOGICAL or RELEVANCE.",
                        "x-display-widget": "select"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractPostCommentersInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 10
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Returned by some Actions to support cursor-based pagination; pass it as a query param to continue where the last request ended. Omit if not present — it means there are no more results.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractPostCommentersOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPostCommenters"
      }
    },
    "/actions/linkedin-extract-post-commenters/run/async": {
      "post": {
        "summary": "Run linkedin-extract-post-commenters action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Max Results",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "description": "The maximum number of comments to extract from a single post (up to 1000).",
                        "x-display-widget": "numeric"
                      },
                      "sort_order": {
                        "type": "string",
                        "title": "The sort order, either by REVERSE_CHRONOLOGICAL or RELEVANCE.",
                        "enum": [
                          "newest",
                          "relevant"
                        ],
                        "default": "newest",
                        "description": "The sort order, either by REVERSE_CHRONOLOGICAL or RELEVANCE.",
                        "x-display-widget": "select"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPostCommentersInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPostCommentersAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPostCommentersInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPostCommentersOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-post-commenters/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-post-commenters action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Max Results",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "description": "The maximum number of comments to extract from a single post (up to 1000).",
                        "x-display-widget": "numeric"
                      },
                      "sort_order": {
                        "type": "string",
                        "title": "The sort order, either by REVERSE_CHRONOLOGICAL or RELEVANCE.",
                        "enum": [
                          "newest",
                          "relevant"
                        ],
                        "default": "newest",
                        "description": "The sort order, either by REVERSE_CHRONOLOGICAL or RELEVANCE.",
                        "x-display-widget": "select"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPostCommentersInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPostCommentersSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPostCommentersInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPostCommentersOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-post-likers/run/live": {
      "post": {
        "summary": "Run linkedin-extract-post-likers action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractPostLikersInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 30,
              "minimum": 30,
              "maximum": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractPostLikersOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPostLikers"
      }
    },
    "/actions/linkedin-extract-post-likers/run/async": {
      "post": {
        "summary": "Run linkedin-extract-post-likers action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 100,
                        "maximum": 5000,
                        "description": "Maximum number of post likers to extract per input.",
                        "xAutoPaginate": true
                      },
                      "skip": {
                        "type": "integer",
                        "title": "Skip",
                        "default": 0,
                        "maximum": 30000,
                        "minimum": 0,
                        "description": "Number of likers to skip.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPostLikersInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPostLikersAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPostLikersInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPostLikersOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-post-likers/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-post-likers action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 100,
                        "maximum": 5000,
                        "description": "Maximum number of post likers to extract per input.",
                        "xAutoPaginate": true
                      },
                      "skip": {
                        "type": "integer",
                        "title": "Skip",
                        "default": 0,
                        "maximum": 30000,
                        "minimum": 0,
                        "description": "Number of likers to skip.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractPostLikersInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractPostLikersSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractPostLikersInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractPostLikersOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-profile-viewers/run/live": {
      "post": {
        "summary": "Run linkedin-extract-profile-viewers action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractProfileViewersOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractProfileViewers"
      }
    },
    "/actions/linkedin-extract-profile-viewers/run/async": {
      "post": {
        "summary": "Run linkedin-extract-profile-viewers action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 50,
                        "maximum": 500,
                        "minimum": 1,
                        "description": "The maximum number of viewers to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractProfileViewersAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractProfileViewersOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-profile-viewers/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-profile-viewers action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 50,
                        "maximum": 500,
                        "minimum": 1,
                        "description": "The maximum number of viewers to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractProfileViewersSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractProfileViewersOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-school-alumnis/run/live": {
      "post": {
        "summary": "Run linkedin-extract-school-alumnis action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractSchoolAlumnisInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractSchoolAlumnisOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractSchoolAlumnis"
      }
    },
    "/actions/linkedin-extract-school-alumnis/run/async": {
      "post": {
        "summary": "Run linkedin-extract-school-alumnis action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of profiles\"",
                        "default": 100,
                        "maximum": 30000,
                        "description": "Maximum number of profiles to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractSchoolAlumnisInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractSchoolAlumnisAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractSchoolAlumnisInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractSchoolAlumnisOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-school-alumnis/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-school-alumnis action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of profiles\"",
                        "default": 100,
                        "maximum": 30000,
                        "description": "Maximum number of profiles to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractSchoolAlumnisInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractSchoolAlumnisSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractSchoolAlumnisInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractSchoolAlumnisOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-sent-invitations/run/live": {
      "post": {
        "summary": "Run linkedin-extract-sent-invitations action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 100,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractSentInvitationsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractSentInvitations"
      }
    },
    "/actions/linkedin-extract-sent-invitations/run/async": {
      "post": {
        "summary": "Run linkedin-extract-sent-invitations action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Invitations",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 1,
                        "description": "The maximum number of sent invitations to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractSentInvitationsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractSentInvitationsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-sent-invitations/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-sent-invitations action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Invitations",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 1,
                        "description": "The maximum number of sent invitations to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractSentInvitationsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractSentInvitationsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-similar-companies/run/live": {
      "post": {
        "summary": "Run linkedin-extract-similar-companies action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinExtractSimilarCompaniesInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinExtractSimilarCompaniesOutput"
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractSimilarCompanies"
      }
    },
    "/actions/linkedin-extract-similar-companies/run/async": {
      "post": {
        "summary": "Run linkedin-extract-similar-companies action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractSimilarCompaniesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractSimilarCompaniesAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractSimilarCompaniesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractSimilarCompaniesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-extract-similar-companies/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-extract-similar-companies action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinExtractSimilarCompaniesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinExtractSimilarCompaniesSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinExtractSimilarCompaniesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinExtractSimilarCompaniesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-follow-profile/run/live": {
      "post": {
        "summary": "Run linkedin-follow-profile action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "unfollow": {
                        "type": "boolean",
                        "title": "Unfollow profiles",
                        "default": false,
                        "description": "Check this to unfollow the profiles.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinFollowProfileInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinFollowProfileOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinFollowProfile"
      }
    },
    "/actions/linkedin-follow-profile/run/async": {
      "post": {
        "summary": "Run linkedin-follow-profile action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "unfollow": {
                        "type": "boolean",
                        "title": "Unfollow profiles",
                        "default": false,
                        "description": "Check this to unfollow the profiles.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinFollowProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinFollowProfileAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinFollowProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinFollowProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-follow-profile/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-follow-profile action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "unfollow": {
                        "type": "boolean",
                        "title": "Unfollow profiles",
                        "default": false,
                        "description": "Check this to unfollow the profiles.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinFollowProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinFollowProfileSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinFollowProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinFollowProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-inmail-profile/run/live": {
      "post": {
        "summary": "Run linkedin-inmail-profile action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "default": "",
                        "format": "string",
                        "title": "Message",
                        "description": "The message to send",
                        "x-display-widget": "textarea"
                      },
                      "subject": {
                        "type": "string",
                        "format": "string",
                        "default": "",
                        "title": "Subject",
                        "description": "The subject of the message",
                        "x-display-widget": "textbox"
                      },
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "file_data": {
                              "type": "string",
                              "title": "File",
                              "description": "The file in Base64.",
                              "pattern": "/^[A-Za-z0-9+/]+={0,2}$/",
                              "maxLength": 27000000
                            },
                            "filename": {
                              "type": "string",
                              "format": "string",
                              "title": "File name",
                              "description": "The name of the file with its extension.",
                              "pattern": "/^[A-Za-z0-9 _-]+.(png|jpg|jpeg|gif|bmp|webp|tiff|svg|mp3|m4a|mp4|avi|wav|flac|ico|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|odt|odp|ods|rar|zip)$/i"
                            }
                          }
                        }
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinInmailProfileInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinInmailProfileOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinInmailProfile"
      }
    },
    "/actions/linkedin-inmail-profile/run/async": {
      "post": {
        "summary": "Run linkedin-inmail-profile action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "default": "",
                        "format": "string",
                        "title": "Message",
                        "description": "The message to send",
                        "x-display-widget": "textarea"
                      },
                      "subject": {
                        "type": "string",
                        "format": "string",
                        "default": "",
                        "title": "Subject",
                        "description": "The subject of the message",
                        "x-display-widget": "textbox"
                      },
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "file_data": {
                              "type": "string",
                              "title": "File",
                              "description": "The file in Base64.",
                              "pattern": "/^[A-Za-z0-9+/]+={0,2}$/",
                              "maxLength": 27000000
                            },
                            "filename": {
                              "type": "string",
                              "format": "string",
                              "title": "File name",
                              "description": "The name of the file with its extension.",
                              "pattern": "/^[A-Za-z0-9 _-]+.(png|jpg|jpeg|gif|bmp|webp|tiff|svg|mp3|m4a|mp4|avi|wav|flac|ico|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|odt|odp|ods|rar|zip)$/i"
                            }
                          }
                        }
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinInmailProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinInmailProfileAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinInmailProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinInmailProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-inmail-profile/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-inmail-profile action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "default": "",
                        "format": "string",
                        "title": "Message",
                        "description": "The message to send",
                        "x-display-widget": "textarea"
                      },
                      "subject": {
                        "type": "string",
                        "format": "string",
                        "default": "",
                        "title": "Subject",
                        "description": "The subject of the message",
                        "x-display-widget": "textbox"
                      },
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "file_data": {
                              "type": "string",
                              "title": "File",
                              "description": "The file in Base64.",
                              "pattern": "/^[A-Za-z0-9+/]+={0,2}$/",
                              "maxLength": 27000000
                            },
                            "filename": {
                              "type": "string",
                              "format": "string",
                              "title": "File name",
                              "description": "The name of the file with its extension.",
                              "pattern": "/^[A-Za-z0-9 _-]+.(png|jpg|jpeg|gif|bmp|webp|tiff|svg|mp3|m4a|mp4|avi|wav|flac|ico|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|odt|odp|ods|rar|zip)$/i"
                            }
                          }
                        }
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinInmailProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinInmailProfileSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinInmailProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinInmailProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-invite-event/run/live": {
      "post": {
        "summary": "Run linkedin-invite-event action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinInviteEventInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinInviteEventOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinInviteEvent"
      }
    },
    "/actions/linkedin-invite-event/run/async": {
      "post": {
        "summary": "Run linkedin-invite-event action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinInviteEventInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinInviteEventAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinInviteEventInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinInviteEventOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-invite-event/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-invite-event action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinInviteEventInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinInviteEventSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinInviteEventInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinInviteEventOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-like-post/run/live": {
      "post": {
        "summary": "Run linkedin-like-post action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "interaction_type": {
                        "type": "string",
                        "title": "Interaction",
                        "enum": [
                          "insightful",
                          "love",
                          "support",
                          "celebrate",
                          "like",
                          "funny",
                          "random"
                        ],
                        "description": "Interaction",
                        "x-display-widget": "select"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinLikePostInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinLikePostOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinLikePost"
      }
    },
    "/actions/linkedin-like-post/run/async": {
      "post": {
        "summary": "Run linkedin-like-post action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "interaction_type": {
                        "type": "string",
                        "title": "Interaction",
                        "enum": [
                          "insightful",
                          "love",
                          "support",
                          "celebrate",
                          "like",
                          "funny",
                          "random"
                        ],
                        "description": "Interaction",
                        "x-display-widget": "select"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinLikePostInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinLikePostAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinLikePostInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinLikePostOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-like-post/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-like-post action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "interaction_type": {
                        "type": "string",
                        "title": "Interaction",
                        "enum": [
                          "insightful",
                          "love",
                          "support",
                          "celebrate",
                          "like",
                          "funny",
                          "random"
                        ],
                        "description": "Interaction",
                        "x-display-widget": "select"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinLikePostInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinLikePostSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinLikePostInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinLikePostOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-mark-message-as-read/run/live": {
      "post": {
        "summary": "Run linkedin-mark-message-as-read action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinMarkMessageAsReadInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinMarkMessageAsReadOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinMarkMessageAsRead"
      }
    },
    "/actions/linkedin-mark-message-as-read/run/async": {
      "post": {
        "summary": "Run linkedin-mark-message-as-read action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinMarkMessageAsReadInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinMarkMessageAsReadAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinMarkMessageAsReadInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinMarkMessageAsReadOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-mark-message-as-read/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-mark-message-as-read action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinMarkMessageAsReadInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinMarkMessageAsReadSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinMarkMessageAsReadInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinMarkMessageAsReadOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-me/run/live": {
      "post": {
        "summary": "Run linkedin-me action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinMeOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinMe"
      }
    },
    "/actions/linkedin-me/run/async": {
      "post": {
        "summary": "Run linkedin-me action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinMeAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinMeOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-me/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-me action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinMeSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinMeOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-message-profile/run/live": {
      "post": {
        "summary": "Run linkedin-message-profile action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "default": "",
                        "format": "string",
                        "title": "Message",
                        "description": "The message to send",
                        "maxLength": 8000,
                        "x-display-widget": "textarea"
                      },
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "file_data": {
                              "type": "string",
                              "title": "File",
                              "description": "The file in Base64.",
                              "pattern": "/^[A-Za-z0-9+/]+={0,2}$/",
                              "maxLength": 27000000
                            },
                            "filename": {
                              "type": "string",
                              "format": "string",
                              "title": "File name",
                              "description": "The name of the file with its extension.",
                              "pattern": "/^[A-Za-z0-9 _-]+.(png|jpg|jpeg|gif|bmp|webp|tiff|svg|mp3|m4a|mp4|avi|wav|flac|ico|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|odt|odp|ods|rar|zip)$/i"
                            }
                          }
                        }
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinMessageProfileInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinMessageProfileOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinMessageProfile"
      }
    },
    "/actions/linkedin-message-profile/run/async": {
      "post": {
        "summary": "Run linkedin-message-profile action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "default": "",
                        "format": "string",
                        "title": "Message",
                        "description": "The message to send",
                        "maxLength": 8000,
                        "x-display-widget": "textarea"
                      },
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "file_data": {
                              "type": "string",
                              "title": "File",
                              "description": "The file in Base64.",
                              "pattern": "/^[A-Za-z0-9+/]+={0,2}$/",
                              "maxLength": 27000000
                            },
                            "filename": {
                              "type": "string",
                              "format": "string",
                              "title": "File name",
                              "description": "The name of the file with its extension.",
                              "pattern": "/^[A-Za-z0-9 _-]+.(png|jpg|jpeg|gif|bmp|webp|tiff|svg|mp3|m4a|mp4|avi|wav|flac|ico|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|odt|odp|ods|rar|zip)$/i"
                            }
                          }
                        }
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinMessageProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinMessageProfileAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinMessageProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinMessageProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-message-profile/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-message-profile action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "default": "",
                        "format": "string",
                        "title": "Message",
                        "description": "The message to send",
                        "maxLength": 8000,
                        "x-display-widget": "textarea"
                      },
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "file_data": {
                              "type": "string",
                              "title": "File",
                              "description": "The file in Base64.",
                              "pattern": "/^[A-Za-z0-9+/]+={0,2}$/",
                              "maxLength": 27000000
                            },
                            "filename": {
                              "type": "string",
                              "format": "string",
                              "title": "File name",
                              "description": "The name of the file with its extension.",
                              "pattern": "/^[A-Za-z0-9 _-]+.(png|jpg|jpeg|gif|bmp|webp|tiff|svg|mp3|m4a|mp4|avi|wav|flac|ico|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|odt|odp|ods|rar|zip)$/i"
                            }
                          }
                        }
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinMessageProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinMessageProfileSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinMessageProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinMessageProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-peopleid-from-salesnavigatorid/run/live": {
      "post": {
        "summary": "Run linkedin-peopleid-from-salesnavigatorid action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/LinkedinPeopleidFromSalesnavigatoridInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinPeopleidFromSalesnavigatoridOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinPeopleidFromSalesnavigatorid"
      }
    },
    "/actions/linkedin-peopleid-from-salesnavigatorid/run/async": {
      "post": {
        "summary": "Run linkedin-peopleid-from-salesnavigatorid action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinPeopleidFromSalesnavigatoridInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinPeopleidFromSalesnavigatoridAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinPeopleidFromSalesnavigatoridInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinPeopleidFromSalesnavigatoridOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-peopleid-from-salesnavigatorid/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-peopleid-from-salesnavigatorid action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinPeopleidFromSalesnavigatoridInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinPeopleidFromSalesnavigatoridSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinPeopleidFromSalesnavigatoridInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinPeopleidFromSalesnavigatoridOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-companies/run/live": {
      "post": {
        "summary": "Run linkedin-search-companies action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinSearchCompaniesInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinSearchCompaniesOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchCompanies"
      }
    },
    "/actions/linkedin-search-companies/run/async": {
      "post": {
        "summary": "Run linkedin-search-companies action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "minimum": 1,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchCompaniesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchCompaniesAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchCompaniesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchCompaniesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-companies/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-search-companies action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "minimum": 1,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchCompaniesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchCompaniesSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchCompaniesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchCompaniesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-company-employees/run/live": {
      "post": {
        "summary": "Run linkedin-search-company-employees action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinSearchCompanyEmployeesInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinSearchCompanyEmployeesOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchCompanyEmployees"
      }
    },
    "/actions/linkedin-search-company-employees/run/async": {
      "post": {
        "summary": "Run linkedin-search-company-employees action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "minimum": 1,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchCompanyEmployeesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchCompanyEmployeesAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchCompanyEmployeesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchCompanyEmployeesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-company-employees/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-search-company-employees action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "minimum": 1,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchCompanyEmployeesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchCompanyEmployeesSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchCompanyEmployeesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchCompanyEmployeesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-content/run/live": {
      "post": {
        "summary": "Run linkedin-search-content action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinSearchContentInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinSearchContentOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchContent"
      }
    },
    "/actions/linkedin-search-content/run/async": {
      "post": {
        "summary": "Run linkedin-search-content action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Posts",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of posts to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchContentInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchContentAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchContentInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchContentOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-content/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-search-content action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Posts",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of posts to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchContentInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchContentSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchContentInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchContentOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-events/run/live": {
      "post": {
        "summary": "Run linkedin-search-events action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinSearchEventsInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinSearchEventsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchEvents"
      }
    },
    "/actions/linkedin-search-events/run/async": {
      "post": {
        "summary": "Run linkedin-search-events action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "minimum": 1,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchEventsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchEventsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchEventsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchEventsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-events/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-search-events action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "minimum": 1,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchEventsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchEventsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchEventsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchEventsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-groups/run/live": {
      "post": {
        "summary": "Run linkedin-search-groups action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinSearchGroupsInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinSearchGroupsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchGroups"
      }
    },
    "/actions/linkedin-search-groups/run/async": {
      "post": {
        "summary": "Run linkedin-search-groups action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "minimum": 1,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchGroupsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchGroupsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchGroupsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchGroupsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-groups/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-search-groups action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "minimum": 1,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchGroupsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchGroupsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchGroupsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchGroupsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-jobs/run/live": {
      "post": {
        "summary": "Run linkedin-search-jobs action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinSearchJobsInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 50,
              "minimum": 50,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinSearchJobsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchJobs"
      }
    },
    "/actions/linkedin-search-jobs/run/async": {
      "post": {
        "summary": "Run linkedin-search-jobs action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 500,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchJobsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchJobsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchJobsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchJobsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-jobs/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-search-jobs action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 500,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "minimum": 1,
                        "xAutoPaginate": true,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchJobsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchJobsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchJobsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchJobsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-people/run/live": {
      "post": {
        "summary": "Run linkedin-search-people action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinSearchPeopleInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinSearchPeopleOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchPeople"
      }
    },
    "/actions/linkedin-search-people/run/async": {
      "post": {
        "summary": "Run linkedin-search-people action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "minimum": 1,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchPeopleInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchPeopleAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchPeopleInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchPeopleOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-people/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-search-people action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "minimum": 1,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchPeopleInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchPeopleSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchPeopleInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchPeopleOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-schools/run/live": {
      "post": {
        "summary": "Run linkedin-search-schools action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinSearchSchoolsInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 10,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinSearchSchoolsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchSchools"
      }
    },
    "/actions/linkedin-search-schools/run/async": {
      "post": {
        "summary": "Run linkedin-search-schools action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "minimum": 1,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchSchoolsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchSchoolsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchSchoolsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchSchoolsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-search-schools/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-search-schools action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Jobs",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of jobs to extract per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "max_pages": {
                        "type": "integer",
                        "description": "The maximum number of pages to return.",
                        "xAutoPaginate": true,
                        "minimum": 1,
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      },
                      "only_extract_unique_profile": {
                        "type": "boolean",
                        "description": "Indicate if we want only extract unique profile",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinSearchSchoolsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinSearchSchoolsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinSearchSchoolsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinSearchSchoolsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-visit-company/run/live": {
      "post": {
        "summary": "Run linkedin-visit-company action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinVisitCompanyInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinVisitCompanyOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinVisitCompany"
      }
    },
    "/actions/linkedin-visit-company/run/async": {
      "post": {
        "summary": "Run linkedin-visit-company action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinVisitCompanyInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinVisitCompanyAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinVisitCompanyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinVisitCompanyOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-visit-company/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-visit-company action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinVisitCompanyInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinVisitCompanySchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinVisitCompanyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinVisitCompanyOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-visit-profile/run/live": {
      "post": {
        "summary": "Run linkedin-visit-profile action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/LinkedinVisitProfileInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedinVisitProfileOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinVisitProfile"
      }
    },
    "/actions/linkedin-visit-profile/run/async": {
      "post": {
        "summary": "Run linkedin-visit-profile action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinVisitProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinVisitProfileAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinVisitProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinVisitProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-visit-profile/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-visit-profile action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedinVisitProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinVisitProfileSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/LinkedinVisitProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinVisitProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-withdraw-invitations/run/live": {
      "post": {
        "summary": "Run linkedin-withdraw-invitations action live",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "last_page_start": {
                        "type": "boolean",
                        "title": "Start from last page",
                        "default": false,
                        "description": "In order to start withdrawing the oldest connection requests first, you should tick this box.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 100,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedinWithdrawInvitationsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinWithdrawInvitations"
      }
    },
    "/actions/linkedin-withdraw-invitations/run/async": {
      "post": {
        "summary": "Run linkedin-withdraw-invitations action asynchronously",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Invitations",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 1,
                        "description": "The maximum number of invitations to withdraw.",
                        "x-display-widget": "numeric"
                      },
                      "last_page_start": {
                        "type": "boolean",
                        "title": "Start from last page",
                        "default": false,
                        "description": "In order to start withdrawing the oldest connection requests first, you should tick this box.",
                        "x-display-widget": "checkbox"
                      },
                      "max_pages": {
                        "type": "integer",
                        "title": "Maximum Invitations",
                        "default": 1,
                        "maximum": 10,
                        "minimum": 1,
                        "description": "The number of pages to withdraw.",
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinWithdrawInvitationsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinWithdrawInvitationsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/linkedin-withdraw-invitations/run/schedule": {
      "post": {
        "summary": "Schedule linkedin-withdraw-invitations action",
        "tags": [
          "actions / linkedin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Invitations",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 1,
                        "description": "The maximum number of invitations to withdraw.",
                        "x-display-widget": "numeric"
                      },
                      "last_page_start": {
                        "type": "boolean",
                        "title": "Start from last page",
                        "default": false,
                        "description": "In order to start withdrawing the oldest connection requests first, you should tick this box.",
                        "x-display-widget": "checkbox"
                      },
                      "max_pages": {
                        "type": "integer",
                        "title": "Maximum Invitations",
                        "default": 1,
                        "maximum": 10,
                        "minimum": 1,
                        "description": "The number of pages to withdraw.",
                        "deprecated": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "custom_data": {
                          "type": "object",
                          "additionalProperties": true,
                          "nullable": true,
                          "description": "Custom data (ex-metadata)"
                        }
                      },
                      "default": {}
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "linkedinWithdrawInvitationsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/EmptyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LinkedinWithdrawInvitationsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/recruiterlite-search-people/run/live": {
      "post": {
        "summary": "Run recruiterlite-search-people action live",
        "tags": [
          "actions / recruiterlite"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/RecruiterliteSearchPeopleInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 25,
              "maximum": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecruiterliteSearchPeopleOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "recruiterliteSearchPeople"
      }
    },
    "/actions/recruiterlite-search-people/run/async": {
      "post": {
        "summary": "Run recruiterlite-search-people action asynchronously",
        "tags": [
          "actions / recruiterlite"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Results",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 1,
                        "description": "Maximum number of results per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RecruiterliteSearchPeopleInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "recruiterliteSearchPeopleAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/RecruiterliteSearchPeopleInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/RecruiterliteSearchPeopleOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/recruiterlite-search-people/run/schedule": {
      "post": {
        "summary": "Schedule recruiterlite-search-people action",
        "tags": [
          "actions / recruiterlite"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Results",
                        "default": 100,
                        "maximum": 1000,
                        "minimum": 1,
                        "description": "Maximum number of results per search input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RecruiterliteSearchPeopleInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "recruiterliteSearchPeopleSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/RecruiterliteSearchPeopleInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/RecruiterliteSearchPeopleOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-extract-accounts-list/run/live": {
      "post": {
        "summary": "Run salesnavigator-extract-accounts-list action live",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/SalesnavigatorExtractAccountsListInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 25,
              "maximum": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesnavigatorExtractAccountsListOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorExtractAccountsList"
      }
    },
    "/actions/salesnavigator-extract-accounts-list/run/async": {
      "post": {
        "summary": "Run salesnavigator-extract-accounts-list action asynchronously",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 1,
                        "description": "Maximum number of results to extract.",
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorExtractAccountsListInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorExtractAccountsListAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorExtractAccountsListInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorExtractAccountsListOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-extract-accounts-list/run/schedule": {
      "post": {
        "summary": "Schedule salesnavigator-extract-accounts-list action",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 1,
                        "description": "Maximum number of results to extract.",
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorExtractAccountsListInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorExtractAccountsListSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorExtractAccountsListInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorExtractAccountsListOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-connect-profile/run/live": {
      "post": {
        "summary": "Run salesnavigator-connect-profile action live",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "title": "Custom Message",
                        "default": "Hello {{first_name}}, \n\nI'm a huge fan of XXX.\nWould you be willing to share your best techniques regarding XXX?\n\nHave a nice day,\nJohn",
                        "description": "Your custom message, maximum length is 300 (to take into account when using liquid)",
                        "type": "string",
                        "x-display-widget": "textarea"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/SalesnavigatorConnectProfileInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesnavigatorConnectProfileOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorConnectProfile"
      }
    },
    "/actions/salesnavigator-connect-profile/run/async": {
      "post": {
        "summary": "Run salesnavigator-connect-profile action asynchronously",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "title": "Custom Message",
                        "default": "Hello {{first_name}}, \n\nI'm a huge fan of XXX.\nWould you be willing to share your best techniques regarding XXX?\n\nHave a nice day,\nJohn",
                        "description": "Your custom message, maximum length is 300 (to take into account when using liquid)",
                        "type": "string",
                        "x-display-widget": "textarea"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorConnectProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorConnectProfileAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorConnectProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorConnectProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-connect-profile/run/schedule": {
      "post": {
        "summary": "Schedule salesnavigator-connect-profile action",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "title": "Custom Message",
                        "default": "Hello {{first_name}}, \n\nI'm a huge fan of XXX.\nWould you be willing to share your best techniques regarding XXX?\n\nHave a nice day,\nJohn",
                        "description": "Your custom message, maximum length is 300 (to take into account when using liquid)",
                        "type": "string",
                        "x-display-widget": "textarea"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorConnectProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorConnectProfileSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorConnectProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorConnectProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-extract-employees-count/run/live": {
      "post": {
        "summary": "Run salesnavigator-extract-employees-count action live",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesCountInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesCountOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorExtractEmployeesCount"
      }
    },
    "/actions/salesnavigator-extract-employees-count/run/async": {
      "post": {
        "summary": "Run salesnavigator-extract-employees-count action asynchronously",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesCountInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorExtractEmployeesCountAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesCountInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesCountOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-extract-employees-count/run/schedule": {
      "post": {
        "summary": "Schedule salesnavigator-extract-employees-count action",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesCountInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorExtractEmployeesCountSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesCountInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesCountOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-extract-employees-distribution/run/live": {
      "post": {
        "summary": "Run salesnavigator-extract-employees-distribution action live",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesDistributionInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesDistributionOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorExtractEmployeesDistribution"
      }
    },
    "/actions/salesnavigator-extract-employees-distribution/run/async": {
      "post": {
        "summary": "Run salesnavigator-extract-employees-distribution action asynchronously",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesDistributionInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorExtractEmployeesDistributionAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesDistributionInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesDistributionOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-extract-employees-distribution/run/schedule": {
      "post": {
        "summary": "Schedule salesnavigator-extract-employees-distribution action",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesDistributionInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorExtractEmployeesDistributionSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesDistributionInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorExtractEmployeesDistributionOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-extract-leads-list/run/live": {
      "post": {
        "summary": "Run salesnavigator-extract-leads-list action live",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "exclude_viewed_leads": {
                        "type": "boolean",
                        "title": "Exclude Viewed Leads.",
                        "default": false,
                        "description": "Remove viewed Leads from search.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/SalesnavigatorExtractLeadsListInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 25,
              "maximum": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesnavigatorExtractLeadsListOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorExtractLeadsList"
      }
    },
    "/actions/salesnavigator-extract-leads-list/run/async": {
      "post": {
        "summary": "Run salesnavigator-extract-leads-list action asynchronously",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Leads",
                        "default": 100,
                        "maximum": 2500,
                        "minimum": 1,
                        "description": "Maximum number of leads to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "exclude_viewed_leads": {
                        "type": "boolean",
                        "title": "Exclude Viewed Leads.",
                        "default": false,
                        "description": "Remove viewed Leads from search.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorExtractLeadsListInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorExtractLeadsListAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorExtractLeadsListInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorExtractLeadsListOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-extract-leads-list/run/schedule": {
      "post": {
        "summary": "Schedule salesnavigator-extract-leads-list action",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Leads",
                        "default": 100,
                        "maximum": 2500,
                        "minimum": 1,
                        "description": "Maximum number of leads to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "exclude_viewed_leads": {
                        "type": "boolean",
                        "title": "Exclude Viewed Leads.",
                        "default": false,
                        "description": "Remove viewed Leads from search.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorExtractLeadsListInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorExtractLeadsListSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorExtractLeadsListInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorExtractLeadsListOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-inmail-profile/run/live": {
      "post": {
        "summary": "Run salesnavigator-inmail-profile action live",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "subject": {
                        "type": "string",
                        "default": "",
                        "title": "Subject",
                        "description": "The subject of the message",
                        "x-display-widget": "textbox"
                      },
                      "message": {
                        "type": "string",
                        "default": "",
                        "format": "string",
                        "title": "Message",
                        "description": "The message to send",
                        "maxLength": 1900,
                        "x-display-widget": "textarea"
                      },
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "file_data": {
                              "type": "string",
                              "title": "File",
                              "description": "The file in Base64.",
                              "pattern": "/^[A-Za-z0-9+/]+={0,2}$/",
                              "maxLength": 27000000
                            },
                            "filename": {
                              "type": "string",
                              "format": "string",
                              "title": "File name",
                              "description": "The name of the file with its extension.",
                              "pattern": "/^[A-Za-z0-9 _-]+.(png|jpg|jpeg|gif|bmp|webp|tiff|svg|mp3|m4a|mp4|avi|wav|flac|ico|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|odt|odp|ods|rar|zip)$/i"
                            }
                          }
                        }
                      },
                      "smart_links": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "file_data": {
                                      "type": "string",
                                      "title": "File",
                                      "description": "The file in Base64.",
                                      "pattern": "/^[A-Za-z0-9+/]+={0,2}$/",
                                      "maxLength": 27000000
                                    },
                                    "filename": {
                                      "type": "string",
                                      "format": "string",
                                      "title": "File name",
                                      "description": "The name of the file with its extension.",
                                      "pattern": "/^[A-Za-z0-9 _-]+.(png|jpg|jpeg|gif|bmp|webp|tiff|svg|mp3|m4a|mp4|avi|wav|flac|ico|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|odt|odp|ods|rar|zip)$/i"
                                    }
                                  },
                                  "required": [
                                    "file_data",
                                    "filename"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "title": {
                                      "type": "string"
                                    },
                                    "url": {
                                      "type": "string",
                                      "format": "uri"
                                    }
                                  },
                                  "required": [
                                    "title",
                                    "url"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/SalesnavigatorInmailProfileInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesnavigatorInmailProfileOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorInmailProfile"
      }
    },
    "/actions/salesnavigator-inmail-profile/run/async": {
      "post": {
        "summary": "Run salesnavigator-inmail-profile action asynchronously",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "subject": {
                        "type": "string",
                        "default": "",
                        "title": "Subject",
                        "description": "The subject of the message",
                        "x-display-widget": "textbox"
                      },
                      "message": {
                        "type": "string",
                        "default": "",
                        "format": "string",
                        "title": "Message",
                        "description": "The message to send",
                        "maxLength": 1900,
                        "x-display-widget": "textarea"
                      },
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "file_data": {
                              "type": "string",
                              "title": "File",
                              "description": "The file in Base64.",
                              "pattern": "/^[A-Za-z0-9+/]+={0,2}$/",
                              "maxLength": 27000000
                            },
                            "filename": {
                              "type": "string",
                              "format": "string",
                              "title": "File name",
                              "description": "The name of the file with its extension.",
                              "pattern": "/^[A-Za-z0-9 _-]+.(png|jpg|jpeg|gif|bmp|webp|tiff|svg|mp3|m4a|mp4|avi|wav|flac|ico|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|odt|odp|ods|rar|zip)$/i"
                            }
                          }
                        }
                      },
                      "smart_links": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "file_data": {
                                      "type": "string",
                                      "title": "File",
                                      "description": "The file in Base64.",
                                      "pattern": "/^[A-Za-z0-9+/]+={0,2}$/",
                                      "maxLength": 27000000
                                    },
                                    "filename": {
                                      "type": "string",
                                      "format": "string",
                                      "title": "File name",
                                      "description": "The name of the file with its extension.",
                                      "pattern": "/^[A-Za-z0-9 _-]+.(png|jpg|jpeg|gif|bmp|webp|tiff|svg|mp3|m4a|mp4|avi|wav|flac|ico|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|odt|odp|ods|rar|zip)$/i"
                                    }
                                  },
                                  "required": [
                                    "file_data",
                                    "filename"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "title": {
                                      "type": "string"
                                    },
                                    "url": {
                                      "type": "string",
                                      "format": "uri"
                                    }
                                  },
                                  "required": [
                                    "title",
                                    "url"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorInmailProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorInmailProfileAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorInmailProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorInmailProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-inmail-profile/run/schedule": {
      "post": {
        "summary": "Schedule salesnavigator-inmail-profile action",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "subject": {
                        "type": "string",
                        "default": "",
                        "title": "Subject",
                        "description": "The subject of the message",
                        "x-display-widget": "textbox"
                      },
                      "message": {
                        "type": "string",
                        "default": "",
                        "format": "string",
                        "title": "Message",
                        "description": "The message to send",
                        "maxLength": 1900,
                        "x-display-widget": "textarea"
                      },
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "file_data": {
                              "type": "string",
                              "title": "File",
                              "description": "The file in Base64.",
                              "pattern": "/^[A-Za-z0-9+/]+={0,2}$/",
                              "maxLength": 27000000
                            },
                            "filename": {
                              "type": "string",
                              "format": "string",
                              "title": "File name",
                              "description": "The name of the file with its extension.",
                              "pattern": "/^[A-Za-z0-9 _-]+.(png|jpg|jpeg|gif|bmp|webp|tiff|svg|mp3|m4a|mp4|avi|wav|flac|ico|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|odt|odp|ods|rar|zip)$/i"
                            }
                          }
                        }
                      },
                      "smart_links": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "file_data": {
                                      "type": "string",
                                      "title": "File",
                                      "description": "The file in Base64.",
                                      "pattern": "/^[A-Za-z0-9+/]+={0,2}$/",
                                      "maxLength": 27000000
                                    },
                                    "filename": {
                                      "type": "string",
                                      "format": "string",
                                      "title": "File name",
                                      "description": "The name of the file with its extension.",
                                      "pattern": "/^[A-Za-z0-9 _-]+.(png|jpg|jpeg|gif|bmp|webp|tiff|svg|mp3|m4a|mp4|avi|wav|flac|ico|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|odt|odp|ods|rar|zip)$/i"
                                    }
                                  },
                                  "required": [
                                    "file_data",
                                    "filename"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "title": {
                                      "type": "string"
                                    },
                                    "url": {
                                      "type": "string",
                                      "format": "uri"
                                    }
                                  },
                                  "required": [
                                    "title",
                                    "url"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorInmailProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorInmailProfileSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorInmailProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorInmailProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-search-companies/run/live": {
      "post": {
        "summary": "Run salesnavigator-search-companies action live",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/SalesnavigatorSearchCompaniesInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 25,
              "maximum": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesnavigatorSearchCompaniesOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorSearchCompanies"
      }
    },
    "/actions/salesnavigator-search-companies/run/async": {
      "post": {
        "summary": "Run salesnavigator-search-companies action asynchronously",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorSearchCompaniesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorSearchCompaniesAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorSearchCompaniesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorSearchCompaniesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-search-companies/run/schedule": {
      "post": {
        "summary": "Schedule salesnavigator-search-companies action",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorSearchCompaniesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorSearchCompaniesSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorSearchCompaniesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorSearchCompaniesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-search-company-employees/run/live": {
      "post": {
        "summary": "Run salesnavigator-search-company-employees action live",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "function": {
                        "type": "string",
                        "title": "Function",
                        "default": "",
                        "description": "Filter employees by function using Sales Navigator numbers that describe the department you want to search people in. For example, 'Sales' is represented by 25, and 'Business Development' by 4. To select multiple functions, separate each number with a comma without spaces.",
                        "x-display-widget": "textbox"
                      },
                      "keywords": {
                        "type": "string",
                        "title": "Keywords",
                        "default": "",
                        "description": "Filter employees by keywords.",
                        "x-display-widget": "textbox"
                      },
                      "geo": {
                        "type": "string",
                        "title": "Geography",
                        "default": "",
                        "description": "Filter by locations (e.g. United States).",
                        "x-display-widget": "textbox"
                      },
                      "relationship": {
                        "type": "string",
                        "title": "Connections (network)",
                        "enum": [
                          null,
                          "F",
                          "S",
                          "O"
                        ],
                        "default": null,
                        "description": "Filter employees by network: 1st, 2nd or 3rd.",
                        "x-display-widget": "select"
                      },
                      "employees_title": {
                        "type": "string",
                        "title": "Job Title",
                        "default": "",
                        "description": "Filter employees by title.",
                        "x-display-widget": "textbox"
                      },
                      "bing_postal_code": {
                        "type": "string",
                        "title": "Postal Code",
                        "default": "",
                        "description": "Filter by postal code.",
                        "x-display-widget": "textbox"
                      },
                      "industry": {
                        "type": "string",
                        "title": "Industry",
                        "default": "",
                        "description": "Filter by industry type (e.g. Internet).",
                        "x-display-widget": "textbox"
                      },
                      "exclude_saved_leads": {
                        "type": "boolean",
                        "title": "Remove Saved Leads from Search",
                        "default": false,
                        "description": "Remove Saved Leads from Search",
                        "x-display-widget": "checkbox"
                      },
                      "seniority": {
                        "type": "array",
                        "title": "Seniority Level",
                        "items": {
                          "type": "string",
                          "enum": [
                            "owner",
                            "partner",
                            "cxo",
                            "vp",
                            "director",
                            "manager",
                            "senior",
                            "entry",
                            "training",
                            "unpaid"
                          ]
                        },
                        "default": [],
                        "description": "Filter employees by their seniority level.",
                        "x-display-widget": "select"
                      },
                      "exclude_viewed_leads": {
                        "type": "boolean",
                        "title": "Remove Viewed Leads from Search",
                        "default": false,
                        "description": "Remove Viewed Leads from Search",
                        "x-display-widget": "checkbox"
                      },
                      "exclude_contacted_leads": {
                        "type": "boolean",
                        "title": "Remove Contacted Leads from Search",
                        "default": false,
                        "description": "Remove Contacted Leads from Search",
                        "x-display-widget": "checkbox"
                      },
                      "search_within_my_accounts": {
                        "type": "boolean",
                        "title": "Search Within Saved Accounts",
                        "default": false,
                        "description": "Search Within Saved Accounts",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/SalesnavigatorSearchCompanyEmployeesInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 25,
              "maximum": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesnavigatorSearchCompanyEmployeesOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorSearchCompanyEmployees"
      }
    },
    "/actions/salesnavigator-search-company-employees/run/async": {
      "post": {
        "summary": "Run salesnavigator-search-company-employees action asynchronously",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "function": {
                        "type": "string",
                        "title": "Function",
                        "default": "",
                        "description": "Filter employees by function using Sales Navigator numbers that describe the department you want to search people in. For example, 'Sales' is represented by 25, and 'Business Development' by 4. To select multiple functions, separate each number with a comma without spaces.",
                        "x-display-widget": "textbox"
                      },
                      "keywords": {
                        "type": "string",
                        "title": "Keywords",
                        "default": "",
                        "description": "Filter employees by keywords.",
                        "x-display-widget": "textbox"
                      },
                      "geo": {
                        "type": "string",
                        "title": "Geography",
                        "default": "",
                        "description": "Filter by locations (e.g. United States).",
                        "x-display-widget": "textbox"
                      },
                      "max_results": {
                        "type": "integer",
                        "title": "Maxmium number of employees",
                        "default": 1000,
                        "maximum": 1000,
                        "description": "Maximum number of employees to extract per input (company profile).",
                        "x-display-widget": "numeric"
                      },
                      "relationship": {
                        "type": "string",
                        "title": "Connections (network)",
                        "enum": [
                          null,
                          "F",
                          "S",
                          "O"
                        ],
                        "default": null,
                        "description": "Filter employees by network: 1st, 2nd or 3rd.",
                        "x-display-widget": "select"
                      },
                      "employees_title": {
                        "type": "string",
                        "title": "Job Title",
                        "default": "",
                        "description": "Filter employees by title.",
                        "x-display-widget": "textbox"
                      },
                      "bing_postal_code": {
                        "type": "string",
                        "title": "Postal Code",
                        "default": "",
                        "description": "Filter by postal code.",
                        "x-display-widget": "textbox"
                      },
                      "industry": {
                        "type": "string",
                        "title": "Industry",
                        "default": "",
                        "description": "Filter by industry type (e.g. Internet).",
                        "x-display-widget": "textbox"
                      },
                      "exclude_saved_leads": {
                        "type": "boolean",
                        "title": "Remove Saved Leads from Search",
                        "default": false,
                        "description": "Remove Saved Leads from Search",
                        "x-display-widget": "checkbox"
                      },
                      "seniority": {
                        "type": "array",
                        "title": "Seniority Level",
                        "items": {
                          "type": "string",
                          "enum": [
                            "owner",
                            "partner",
                            "cxo",
                            "vp",
                            "director",
                            "manager",
                            "senior",
                            "entry",
                            "training",
                            "unpaid"
                          ]
                        },
                        "default": [],
                        "description": "Filter employees by their seniority level.",
                        "x-display-widget": "select"
                      },
                      "exclude_viewed_leads": {
                        "type": "boolean",
                        "title": "Remove Viewed Leads from Search",
                        "default": false,
                        "description": "Remove Viewed Leads from Search",
                        "x-display-widget": "checkbox"
                      },
                      "exclude_contacted_leads": {
                        "type": "boolean",
                        "title": "Remove Contacted Leads from Search",
                        "default": false,
                        "description": "Remove Contacted Leads from Search",
                        "x-display-widget": "checkbox"
                      },
                      "search_within_my_accounts": {
                        "type": "boolean",
                        "title": "Search Within Saved Accounts",
                        "default": false,
                        "description": "Search Within Saved Accounts",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorSearchCompanyEmployeesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorSearchCompanyEmployeesAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorSearchCompanyEmployeesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorSearchCompanyEmployeesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-search-company-employees/run/schedule": {
      "post": {
        "summary": "Schedule salesnavigator-search-company-employees action",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "function": {
                        "type": "string",
                        "title": "Function",
                        "default": "",
                        "description": "Filter employees by function using Sales Navigator numbers that describe the department you want to search people in. For example, 'Sales' is represented by 25, and 'Business Development' by 4. To select multiple functions, separate each number with a comma without spaces.",
                        "x-display-widget": "textbox"
                      },
                      "keywords": {
                        "type": "string",
                        "title": "Keywords",
                        "default": "",
                        "description": "Filter employees by keywords.",
                        "x-display-widget": "textbox"
                      },
                      "geo": {
                        "type": "string",
                        "title": "Geography",
                        "default": "",
                        "description": "Filter by locations (e.g. United States).",
                        "x-display-widget": "textbox"
                      },
                      "max_results": {
                        "type": "integer",
                        "title": "Maxmium number of employees",
                        "default": 1000,
                        "maximum": 1000,
                        "description": "Maximum number of employees to extract per input (company profile).",
                        "x-display-widget": "numeric"
                      },
                      "relationship": {
                        "type": "string",
                        "title": "Connections (network)",
                        "enum": [
                          null,
                          "F",
                          "S",
                          "O"
                        ],
                        "default": null,
                        "description": "Filter employees by network: 1st, 2nd or 3rd.",
                        "x-display-widget": "select"
                      },
                      "employees_title": {
                        "type": "string",
                        "title": "Job Title",
                        "default": "",
                        "description": "Filter employees by title.",
                        "x-display-widget": "textbox"
                      },
                      "bing_postal_code": {
                        "type": "string",
                        "title": "Postal Code",
                        "default": "",
                        "description": "Filter by postal code.",
                        "x-display-widget": "textbox"
                      },
                      "industry": {
                        "type": "string",
                        "title": "Industry",
                        "default": "",
                        "description": "Filter by industry type (e.g. Internet).",
                        "x-display-widget": "textbox"
                      },
                      "exclude_saved_leads": {
                        "type": "boolean",
                        "title": "Remove Saved Leads from Search",
                        "default": false,
                        "description": "Remove Saved Leads from Search",
                        "x-display-widget": "checkbox"
                      },
                      "seniority": {
                        "type": "array",
                        "title": "Seniority Level",
                        "items": {
                          "type": "string",
                          "enum": [
                            "owner",
                            "partner",
                            "cxo",
                            "vp",
                            "director",
                            "manager",
                            "senior",
                            "entry",
                            "training",
                            "unpaid"
                          ]
                        },
                        "default": [],
                        "description": "Filter employees by their seniority level.",
                        "x-display-widget": "select"
                      },
                      "exclude_viewed_leads": {
                        "type": "boolean",
                        "title": "Remove Viewed Leads from Search",
                        "default": false,
                        "description": "Remove Viewed Leads from Search",
                        "x-display-widget": "checkbox"
                      },
                      "exclude_contacted_leads": {
                        "type": "boolean",
                        "title": "Remove Contacted Leads from Search",
                        "default": false,
                        "description": "Remove Contacted Leads from Search",
                        "x-display-widget": "checkbox"
                      },
                      "search_within_my_accounts": {
                        "type": "boolean",
                        "title": "Search Within Saved Accounts",
                        "default": false,
                        "description": "Search Within Saved Accounts",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorSearchCompanyEmployeesInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorSearchCompanyEmployeesSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorSearchCompanyEmployeesInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorSearchCompanyEmployeesOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-search-metrics/run/live": {
      "post": {
        "summary": "Run salesnavigator-search-metrics action live",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "geo": {
                        "type": "string",
                        "title": "Geography",
                        "default": "",
                        "description": "Filter employees by geography. Sales Navigator/LinkedIn numbers describing the location you want to search people in. For example 'Paris, Ile-de-France' is 101240143, 'Greater Lyon Area' is 90009674 and 'France' is 105015875. To cumulate several location, you must seprate each location with a comma.",
                        "x-display-widget": "textbox"
                      },
                      "function": {
                        "type": "string",
                        "title": "Function",
                        "default": "",
                        "description": "Filter employees by function using Sales Navigator numbers that describe the department you want to search people in. For example, 'Sales' is represented by 25, and 'Business Development' by 4. To select multiple functions, separate each number with a comma without spaces.",
                        "x-display-widget": "textbox"
                      },
                      "seniority": {
                        "type": "array",
                        "title": "Seniority Level",
                        "items": {
                          "type": "string",
                          "enum": [
                            "owner",
                            "partner",
                            "cxo",
                            "vp",
                            "director",
                            "manager",
                            "senior",
                            "entry",
                            "training",
                            "unpaid"
                          ]
                        },
                        "default": [],
                        "description": "Filter employees by their seniority level.",
                        "x-display-widget": "select"
                      },
                      "employees_title": {
                        "type": "string",
                        "title": "Employees Title",
                        "default": "",
                        "description": "Add a title to the employees search.",
                        "x-display-widget": "textbox"
                      },
                      "exclude_saved_leads": {
                        "type": "boolean",
                        "title": "Exclude saved leads",
                        "default": false,
                        "description": "Remove saved leads from search.",
                        "x-display-widget": "checkbox"
                      },
                      "exclude_crm_contacts": {
                        "type": "boolean",
                        "title": "Exclude CRM Contacts",
                        "default": false,
                        "description": "Remove CRM contacts from search.",
                        "x-display-widget": "checkbox"
                      },
                      "exclude_viewed_leads": {
                        "type": "boolean",
                        "title": "Exclude Viewed Leads.",
                        "default": false,
                        "description": "Remove viewed Leads from search.",
                        "x-display-widget": "checkbox"
                      },
                      "keywords": {
                        "type": "string",
                        "title": "Employees Keywords",
                        "default": "",
                        "description": "Add keywords to the employees search.",
                        "x-display-widget": "textbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/SalesnavigatorSearchMetricsInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesnavigatorSearchMetricsOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorSearchMetrics"
      }
    },
    "/actions/salesnavigator-search-metrics/run/async": {
      "post": {
        "summary": "Run salesnavigator-search-metrics action asynchronously",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "geo": {
                        "type": "string",
                        "title": "Geography",
                        "default": "",
                        "description": "Filter employees by geography. Sales Navigator/LinkedIn numbers describing the location you want to search people in. For example 'Paris, Ile-de-France' is 101240143, 'Greater Lyon Area' is 90009674 and 'France' is 105015875. To cumulate several location, you must seprate each location with a comma.",
                        "x-display-widget": "textbox"
                      },
                      "function": {
                        "type": "string",
                        "title": "Function",
                        "default": "",
                        "description": "Filter employees by function using Sales Navigator numbers that describe the department you want to search people in. For example, 'Sales' is represented by 25, and 'Business Development' by 4. To select multiple functions, separate each number with a comma without spaces.",
                        "x-display-widget": "textbox"
                      },
                      "seniority": {
                        "type": "array",
                        "title": "Seniority Level",
                        "items": {
                          "type": "string",
                          "enum": [
                            "owner",
                            "partner",
                            "cxo",
                            "vp",
                            "director",
                            "manager",
                            "senior",
                            "entry",
                            "training",
                            "unpaid"
                          ]
                        },
                        "default": [],
                        "description": "Filter employees by their seniority level.",
                        "x-display-widget": "select"
                      },
                      "employees_title": {
                        "type": "string",
                        "title": "Employees Title",
                        "default": "",
                        "description": "Add a title to the employees search.",
                        "x-display-widget": "textbox"
                      },
                      "exclude_saved_leads": {
                        "type": "boolean",
                        "title": "Exclude saved leads",
                        "default": false,
                        "description": "Remove saved leads from search.",
                        "x-display-widget": "checkbox"
                      },
                      "exclude_crm_contacts": {
                        "type": "boolean",
                        "title": "Exclude CRM Contacts",
                        "default": false,
                        "description": "Remove CRM contacts from search.",
                        "x-display-widget": "checkbox"
                      },
                      "exclude_viewed_leads": {
                        "type": "boolean",
                        "title": "Exclude Viewed Leads.",
                        "default": false,
                        "description": "Remove viewed Leads from search.",
                        "x-display-widget": "checkbox"
                      },
                      "keywords": {
                        "type": "string",
                        "title": "Employees Keywords",
                        "default": "",
                        "description": "Add keywords to the employees search.",
                        "x-display-widget": "textbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorSearchMetricsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorSearchMetricsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorSearchMetricsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorSearchMetricsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-search-metrics/run/schedule": {
      "post": {
        "summary": "Schedule salesnavigator-search-metrics action",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "geo": {
                        "type": "string",
                        "title": "Geography",
                        "default": "",
                        "description": "Filter employees by geography. Sales Navigator/LinkedIn numbers describing the location you want to search people in. For example 'Paris, Ile-de-France' is 101240143, 'Greater Lyon Area' is 90009674 and 'France' is 105015875. To cumulate several location, you must seprate each location with a comma.",
                        "x-display-widget": "textbox"
                      },
                      "function": {
                        "type": "string",
                        "title": "Function",
                        "default": "",
                        "description": "Filter employees by function using Sales Navigator numbers that describe the department you want to search people in. For example, 'Sales' is represented by 25, and 'Business Development' by 4. To select multiple functions, separate each number with a comma without spaces.",
                        "x-display-widget": "textbox"
                      },
                      "seniority": {
                        "type": "array",
                        "title": "Seniority Level",
                        "items": {
                          "type": "string",
                          "enum": [
                            "owner",
                            "partner",
                            "cxo",
                            "vp",
                            "director",
                            "manager",
                            "senior",
                            "entry",
                            "training",
                            "unpaid"
                          ]
                        },
                        "default": [],
                        "description": "Filter employees by their seniority level.",
                        "x-display-widget": "select"
                      },
                      "employees_title": {
                        "type": "string",
                        "title": "Employees Title",
                        "default": "",
                        "description": "Add a title to the employees search.",
                        "x-display-widget": "textbox"
                      },
                      "exclude_saved_leads": {
                        "type": "boolean",
                        "title": "Exclude saved leads",
                        "default": false,
                        "description": "Remove saved leads from search.",
                        "x-display-widget": "checkbox"
                      },
                      "exclude_crm_contacts": {
                        "type": "boolean",
                        "title": "Exclude CRM Contacts",
                        "default": false,
                        "description": "Remove CRM contacts from search.",
                        "x-display-widget": "checkbox"
                      },
                      "exclude_viewed_leads": {
                        "type": "boolean",
                        "title": "Exclude Viewed Leads.",
                        "default": false,
                        "description": "Remove viewed Leads from search.",
                        "x-display-widget": "checkbox"
                      },
                      "keywords": {
                        "type": "string",
                        "title": "Employees Keywords",
                        "default": "",
                        "description": "Add keywords to the employees search.",
                        "x-display-widget": "textbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorSearchMetricsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorSearchMetricsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorSearchMetricsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorSearchMetricsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-search-people/run/live": {
      "post": {
        "summary": "Run salesnavigator-search-people action live",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "exclude_crm_contacts": {
                        "type": "boolean",
                        "title": "Exclude CRM contacts.",
                        "default": false,
                        "description": "Exclude CRM contacts",
                        "x-display-widget": "checkbox"
                      },
                      "exclude_viewed_leads": {
                        "type": "boolean",
                        "title": "Exclude Viewed Leads.",
                        "default": false,
                        "description": "Remove viewed Leads from search; note that this option only works if there's a 'Visit' step in your workflow.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/SalesnavigatorSearchPeopleInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 25,
              "maximum": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesnavigatorSearchPeopleOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorSearchPeople"
      }
    },
    "/actions/salesnavigator-search-people/run/async": {
      "post": {
        "summary": "Run salesnavigator-search-people action asynchronously",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Leads",
                        "default": 100,
                        "maximum": 2500,
                        "minimum": 1,
                        "description": "Maximum number of profile to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "exclude_crm_contacts": {
                        "type": "boolean",
                        "title": "Exclude CRM contacts.",
                        "default": false,
                        "description": "Exclude CRM contacts",
                        "x-display-widget": "checkbox"
                      },
                      "exclude_viewed_leads": {
                        "type": "boolean",
                        "title": "Exclude Viewed Leads.",
                        "default": false,
                        "description": "Remove viewed Leads from search; note that this option only works if there's a 'Visit' step in your workflow.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorSearchPeopleInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorSearchPeopleAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorSearchPeopleInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorSearchPeopleOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-search-people/run/schedule": {
      "post": {
        "summary": "Schedule salesnavigator-search-people action",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Leads",
                        "default": 100,
                        "maximum": 2500,
                        "minimum": 1,
                        "description": "Maximum number of profile to extract per input.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      },
                      "exclude_crm_contacts": {
                        "type": "boolean",
                        "title": "Exclude CRM contacts.",
                        "default": false,
                        "description": "Exclude CRM contacts",
                        "x-display-widget": "checkbox"
                      },
                      "exclude_viewed_leads": {
                        "type": "boolean",
                        "title": "Exclude Viewed Leads.",
                        "default": false,
                        "description": "Remove viewed Leads from search; note that this option only works if there's a 'Visit' step in your workflow.",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorSearchPeopleInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorSearchPeopleSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorSearchPeopleInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorSearchPeopleOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-visit-company/run/live": {
      "post": {
        "summary": "Run salesnavigator-visit-company action live",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/SalesnavigatorVisitCompanyInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesnavigatorVisitCompanyOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorVisitCompany"
      }
    },
    "/actions/salesnavigator-visit-company/run/async": {
      "post": {
        "summary": "Run salesnavigator-visit-company action asynchronously",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorVisitCompanyInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorVisitCompanyAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorVisitCompanyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorVisitCompanyOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-visit-company/run/schedule": {
      "post": {
        "summary": "Schedule salesnavigator-visit-company action",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorVisitCompanyInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorVisitCompanySchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorVisitCompanyInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorVisitCompanyOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-visit-profile/run/live": {
      "post": {
        "summary": "Run salesnavigator-visit-profile action live",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "extract_interests": {
                        "type": "boolean",
                        "title": "Extract Interests",
                        "default": false,
                        "description": "Extract Interests",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/SalesnavigatorVisitProfileInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesnavigatorVisitProfileOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorVisitProfile"
      }
    },
    "/actions/salesnavigator-visit-profile/run/async": {
      "post": {
        "summary": "Run salesnavigator-visit-profile action asynchronously",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "extract_interests": {
                        "type": "boolean",
                        "title": "Extract Interests",
                        "default": false,
                        "description": "Extract Interests",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorVisitProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorVisitProfileAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorVisitProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorVisitProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/salesnavigator-visit-profile/run/schedule": {
      "post": {
        "summary": "Schedule salesnavigator-visit-profile action",
        "tags": [
          "actions / salesnavigator"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "extract_interests": {
                        "type": "boolean",
                        "title": "Extract Interests",
                        "default": false,
                        "description": "Extract Interests",
                        "x-display-widget": "checkbox"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesnavigatorVisitProfileInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "salesnavigatorVisitProfileSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/SalesnavigatorVisitProfileInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SalesnavigatorVisitProfileOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/thefork-extract-reviews/run/live": {
      "post": {
        "summary": "Run thefork-extract-reviews action live",
        "tags": [
          "actions / thefork"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "sort": {
                        "type": "string",
                        "title": "Sort",
                        "default": "newest",
                        "enum": [
                          "highest",
                          "lowest",
                          "newest",
                          "oldest"
                        ],
                        "description": "The sort order of the reviews."
                      },
                      "language": {
                        "type": "string",
                        "title": "Language",
                        "default": "all",
                        "enum": [
                          "all",
                          "en",
                          "it",
                          "de",
                          "fr",
                          "es"
                        ],
                        "description": "The language of the reviews."
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "input": {
                    "$ref": "#/components/schemas/TheforkExtractReviewsInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 40,
              "minimum": 40,
              "maximum": 40
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TheforkExtractReviewsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "theforkExtractReviews"
      }
    },
    "/actions/thefork-extract-reviews/run/async": {
      "post": {
        "summary": "Run thefork-extract-reviews action asynchronously",
        "tags": [
          "actions / thefork"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "number",
                        "title": "Max Results",
                        "default": 2000,
                        "description": "The maximum number of reviews to retrieve."
                      },
                      "sort": {
                        "type": "string",
                        "title": "Sort",
                        "default": "newest",
                        "enum": [
                          "highest",
                          "lowest",
                          "newest",
                          "oldest"
                        ],
                        "description": "The sort order of the reviews."
                      },
                      "language": {
                        "type": "string",
                        "title": "Language",
                        "default": "all",
                        "enum": [
                          "all",
                          "en",
                          "it",
                          "de",
                          "fr",
                          "es"
                        ],
                        "description": "The language of the reviews."
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TheforkExtractReviewsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "theforkExtractReviewsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/TheforkExtractReviewsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TheforkExtractReviewsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/thefork-extract-reviews/run/schedule": {
      "post": {
        "summary": "Schedule thefork-extract-reviews action",
        "tags": [
          "actions / thefork"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "number",
                        "title": "Max Results",
                        "default": 2000,
                        "description": "The maximum number of reviews to retrieve."
                      },
                      "sort": {
                        "type": "string",
                        "title": "Sort",
                        "default": "newest",
                        "enum": [
                          "highest",
                          "lowest",
                          "newest",
                          "oldest"
                        ],
                        "description": "The sort order of the reviews."
                      },
                      "language": {
                        "type": "string",
                        "title": "Language",
                        "default": "all",
                        "enum": [
                          "all",
                          "en",
                          "it",
                          "de",
                          "fr",
                          "es"
                        ],
                        "description": "The language of the reviews."
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "identity_ids": {
                    "type": "array",
                    "description": "An array of Identity UUIDs linked to identities (e.g. LinkedIn) used to execute the Action. You must provide at least one valid UID with access to the integration. Do not use account_uid values — only user_uid is supported.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "identity_mode": {
                    "type": "string",
                    "enum": [
                      "direct",
                      "auto",
                      "managed"
                    ],
                    "default": "direct",
                    "nullable": true,
                    "description": "If \"auto\", the Action will use any identities from the current workspace (unless you have provided a list of identity_ids). \"managed\" will use the Captain Data pool of identities for an extra credit cost"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TheforkExtractReviewsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "theforkExtractReviewsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/TheforkExtractReviewsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TheforkExtractReviewsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/tripadvisor-extract-hotel/run/live": {
      "post": {
        "summary": "Run tripadvisor-extract-hotel action live",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/TripadvisorExtractHotelInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripadvisorExtractHotelOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorExtractHotel"
      }
    },
    "/actions/tripadvisor-extract-hotel/run/async": {
      "post": {
        "summary": "Run tripadvisor-extract-hotel action asynchronously",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TripadvisorExtractHotelInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorExtractHotelAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/TripadvisorExtractHotelInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TripadvisorExtractHotelOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/tripadvisor-extract-hotel/run/schedule": {
      "post": {
        "summary": "Schedule tripadvisor-extract-hotel action",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TripadvisorExtractHotelInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorExtractHotelSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/TripadvisorExtractHotelInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TripadvisorExtractHotelOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/tripadvisor-extract-restaurant/run/live": {
      "post": {
        "summary": "Run tripadvisor-extract-restaurant action live",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/TripadvisorExtractRestaurantInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripadvisorExtractRestaurantOutput"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorExtractRestaurant"
      }
    },
    "/actions/tripadvisor-extract-restaurant/run/async": {
      "post": {
        "summary": "Run tripadvisor-extract-restaurant action asynchronously",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TripadvisorExtractRestaurantInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorExtractRestaurantAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/TripadvisorExtractRestaurantInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TripadvisorExtractRestaurantOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/tripadvisor-extract-restaurant/run/schedule": {
      "post": {
        "summary": "Schedule tripadvisor-extract-restaurant action",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TripadvisorExtractRestaurantInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorExtractRestaurantSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/TripadvisorExtractRestaurantInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TripadvisorExtractRestaurantOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/tripadvisor-extract-reviews/run/live": {
      "post": {
        "summary": "Run tripadvisor-extract-reviews action live",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "language": {
                        "type": "string",
                        "enum": [
                          "french",
                          "english",
                          "italian",
                          "russian",
                          "german",
                          "all"
                        ],
                        "default": "all",
                        "description": "The language you wish to search in.",
                        "x-display-widget": "select"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "language"
                    ]
                  },
                  "input": {
                    "$ref": "#/components/schemas/TripadvisorExtractReviewsInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "parameters",
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 15,
              "minimum": 15,
              "maximum": 15
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TripadvisorExtractReviewsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorExtractReviews"
      }
    },
    "/actions/tripadvisor-extract-reviews/run/async": {
      "post": {
        "summary": "Run tripadvisor-extract-reviews action asynchronously",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "language": {
                        "type": "string",
                        "enum": [
                          "french",
                          "english",
                          "italian",
                          "russian",
                          "german",
                          "all"
                        ],
                        "default": "all",
                        "description": "The language you wish to search in.",
                        "x-display-widget": "select"
                      },
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "maximum": 1000,
                        "minimum": 1,
                        "description": "The maximum number of viewers to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "language"
                    ]
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TripadvisorExtractReviewsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback",
                  "parameters"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorExtractReviewsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/TripadvisorExtractReviewsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TripadvisorExtractReviewsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/tripadvisor-extract-reviews/run/schedule": {
      "post": {
        "summary": "Schedule tripadvisor-extract-reviews action",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "language": {
                        "type": "string",
                        "enum": [
                          "french",
                          "english",
                          "italian",
                          "russian",
                          "german",
                          "all"
                        ],
                        "default": "all",
                        "description": "The language you wish to search in.",
                        "x-display-widget": "select"
                      },
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum number of results",
                        "maximum": 1000,
                        "minimum": 1,
                        "description": "The maximum number of viewers to extract.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "language"
                    ]
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TripadvisorExtractReviewsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback",
                  "parameters"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorExtractReviewsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/TripadvisorExtractReviewsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TripadvisorExtractReviewsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/tripadvisor-search-hotels/run/live": {
      "post": {
        "summary": "Run tripadvisor-search-hotels action live",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "input": {
                    "$ref": "#/components/schemas/TripadvisorSearchHotelsInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 30,
              "minimum": 30,
              "maximum": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TripadvisorSearchHotelsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorSearchHotels"
      }
    },
    "/actions/tripadvisor-search-hotels/run/async": {
      "post": {
        "summary": "Run tripadvisor-search-hotels action asynchronously",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Results",
                        "default": 100,
                        "maximum": 30000,
                        "minimum": 1,
                        "description": "Maximum number of results.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TripadvisorSearchHotelsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorSearchHotelsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/TripadvisorSearchHotelsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TripadvisorSearchHotelsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/tripadvisor-search-hotels/run/schedule": {
      "post": {
        "summary": "Schedule tripadvisor-search-hotels action",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Results",
                        "default": 100,
                        "maximum": 30000,
                        "minimum": 1,
                        "description": "Maximum number of results.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TripadvisorSearchHotelsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorSearchHotelsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/TripadvisorSearchHotelsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TripadvisorSearchHotelsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/tripadvisor-search-restaurants/run/live": {
      "post": {
        "summary": "Run tripadvisor-search-restaurants action live",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "default": {}
                  },
                  "input": {
                    "$ref": "#/components/schemas/TripadvisorSearchRestaurantsInput"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page index for manual pagination, starting at 1; increase sequentially (page=1, page=2, etc.) until the response returns an empty data array.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "description": "Maximum number of results per page (read-only; defined by the Action, actual count may be lower in some cases like throttling or internal limits).",
            "schema": {
              "type": "integer",
              "default": 30,
              "minimum": 30,
              "maximum": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TripadvisorSearchRestaurantsOutput"
                  }
                }
              }
            },
            "headers": {
              "X-Pagination-Previous": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the previous page of results, when available."
              },
              "X-Pagination-Next": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "Full URL to fetch the next page of results, when available."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorSearchRestaurants"
      }
    },
    "/actions/tripadvisor-search-restaurants/run/async": {
      "post": {
        "summary": "Run tripadvisor-search-restaurants action asynchronously",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Results",
                        "default": 100,
                        "maximum": 30000,
                        "minimum": 1,
                        "description": "Maximum number of results.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TripadvisorSearchRestaurantsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100000
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionAsyncResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorSearchRestaurantsAsync",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/TripadvisorSearchRestaurantsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TripadvisorSearchRestaurantsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/tripadvisor-search-restaurants/run/schedule": {
      "post": {
        "summary": "Schedule tripadvisor-search-restaurants action",
        "tags": [
          "actions / tripadvisor"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "max_results": {
                        "type": "integer",
                        "title": "Maximum Results",
                        "default": 100,
                        "maximum": 30000,
                        "minimum": 1,
                        "description": "Maximum number of results.",
                        "xAutoPaginate": true,
                        "x-display-widget": "numeric"
                      }
                    },
                    "additionalProperties": false,
                    "default": {}
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TripadvisorSearchRestaurantsInput"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "URL to send the results to. The Action will send a POST request with the results to this URL. The request will include a JSON body with the results of the Action.",
                        "nullable": true,
                        "pattern": "^(https?:\\/\\/[^\\s]+)$",
                        "example": "https://example.com/callback"
                      },
                      "headers": {
                        "type": "object",
                        "description": "Headers to include in the callback request.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The timezone to use for the cron expression (IANA timezone format, e.g., \"America/New_York\" or \"Europe/Paris\"). If not provided, the UTC timezone will be used."
                  },
                  "cron": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                  },
                  "schedule_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                  }
                },
                "additionalProperties": false,
                "anyOf": [
                  {
                    "properties": {
                      "cron": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256,
                        "description": "Cron expression for scheduling the action. If provided, the action will be scheduled to run at the specified intervals."
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  {
                    "properties": {
                      "schedule_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This is for one shot or 1st programmation calls. If not provided, the run will be scheduled immediately."
                      }
                    },
                    "required": [
                      "schedule_at"
                    ]
                  }
                ],
                "required": [
                  "inputs",
                  "callback"
                ]
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionScheduleResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "tripadvisorSearchRestaurantsSchedule",
        "callbacks": {
          "onSave": {
            "{$request.body#/callback/url}": {
              "post": {
                "responses": {
                  "200": {
                    "description": "Callback successfully processed"
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "run": {
                            "type": "object",
                            "properties": {
                              "run_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Run UUID"
                              },
                              "batch_uid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Batch UUID"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "CREATED",
                                  "INVALID",
                                  "QUEUED",
                                  "SCHEDULED",
                                  "BLOCKED",
                                  "STOPPED",
                                  "RUNNING",
                                  "FAILED",
                                  "PARTIAL_SUCCEEDED",
                                  "SUCCEEDED"
                                ],
                                "description": "Run status"
                              }
                            },
                            "required": [
                              "run_uid",
                              "batch_uid",
                              "status"
                            ]
                          },
                          "input": {
                            "$ref": "#/components/schemas/TripadvisorSearchRestaurantsInput"
                          },
                          "error": {
                            "$ref": "#/components/schemas/APIError"
                          },
                          "results_count": {
                            "type": "integer",
                            "description": "Number of results in the current callback"
                          },
                          "results": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TripadvisorSearchRestaurantsOutput"
                            },
                            "description": "Results of the current callback"
                          }
                        },
                        "required": [
                          "run"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.captaindata.com/v4"
    }
  ],
  "security": [
    {
      "XApiKeyAuth": []
    }
  ]
}